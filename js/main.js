(()=>{var t={6087:(t,e,r)=>{"use strict";r(5622),r(239),r(4645),r(164),r(4113),r(8812),r(1775),r(4440),r(2107),r(5584),r(1689),r(12),r(2100),r(2390)},6146:(t,e,r)=>{r(6087)},2868:(t,e,r)=>{t.exports=r(1867)},3155:(t,e,r)=>{"use strict";var n=r(4030),i=r(8079),o=r(4687),a=r(7512),u=r(9791),s=r(924),c=r(5903),f=r(5971);t.exports=function(t){return new Promise((function(e,r){var l=t.data,p=t.headers;n.isFormData(l)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(t.auth){var v=t.auth.username||"",d=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";p.Authorization="Basic "+btoa(v+":"+d)}var g=u(t.baseURL,t.url);if(h.open(t.method.toUpperCase(),a(g,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in h?s(h.getAllResponseHeaders()):null,o={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:n,config:t,request:h};i(e,r,o),h=null}},h.onabort=function(){h&&(r(f("Request aborted",t,"ECONNABORTED",h)),h=null)},h.onerror=function(){r(f("Network Error",t,null,h)),h=null},h.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),r(f(e,t,"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var y=(t.withCredentials||c(g))&&t.xsrfCookieName?o.read(t.xsrfCookieName):void 0;y&&(p[t.xsrfHeaderName]=y)}if("setRequestHeader"in h&&n.forEach(p,(function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete p[e]:h.setRequestHeader(e,t)})),n.isUndefined(t.withCredentials)||(h.withCredentials=!!t.withCredentials),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){h&&(h.abort(),r(t),h=null)})),l||(l=null),h.send(l)}))}},1867:(t,e,r)=>{"use strict";var n=r(4030),i=r(3843),o=r(5891),a=r(3316);function u(t){var e=new o(t),r=i(o.prototype.request,e);return n.extend(r,o.prototype,e),n.extend(r,e),r}var s=u(r(457));s.Axios=o,s.create=function(t){return u(a(s.defaults,t))},s.Cancel=r(6266),s.CancelToken=r(9747),s.isCancel=r(9416),s.all=function(t){return Promise.all(t)},s.spread=r(1545),s.isAxiosError=r(232),t.exports=s,t.exports.default=s},6266:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},9747:(t,e,r)=>{"use strict";var n=r(6266);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;t((function(t){r.reason||(r.reason=new n(t),e(r.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(e){t=e})),cancel:t}},t.exports=i},9416:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},5891:(t,e,r)=>{"use strict";var n=r(4030),i=r(7512),o=r(8036),a=r(884),u=r(3316);function s(t){this.defaults=t,this.interceptors={request:new o,response:new o}}s.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=u(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[a,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)r=r.then(e.shift(),e.shift());return r},s.prototype.getUri=function(t){return t=u(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(t){s.prototype[t]=function(e,r){return this.request(u(r||{},{method:t,url:e,data:(r||{}).data}))}})),n.forEach(["post","put","patch"],(function(t){s.prototype[t]=function(e,r,n){return this.request(u(n||{},{method:t,url:e,data:r}))}})),t.exports=s},8036:(t,e,r)=>{"use strict";var n=r(4030);function i(){this.handlers=[]}i.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){n.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=i},9791:(t,e,r)=>{"use strict";var n=r(957),i=r(7050);t.exports=function(t,e){return t&&!n(e)?i(t,e):e}},5971:(t,e,r)=>{"use strict";var n=r(3136);t.exports=function(t,e,r,i,o){var a=new Error(t);return n(a,e,r,i,o)}},884:(t,e,r)=>{"use strict";var n=r(4030),i=r(8630),o=r(9416),a=r(457);function u(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return u(t),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=n.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||a.adapter)(t).then((function(e){return u(t),e.data=i(e.data,e.headers,t.transformResponse),e}),(function(e){return o(e)||(u(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},3136:t=>{"use strict";t.exports=function(t,e,r,n,i){return t.config=e,r&&(t.code=r),t.request=n,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},3316:(t,e,r)=>{"use strict";var n=r(4030);t.exports=function(t,e){e=e||{};var r={},i=["url","method","data"],o=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],u=["validateStatus"];function s(t,e){return n.isPlainObject(t)&&n.isPlainObject(e)?n.merge(t,e):n.isPlainObject(e)?n.merge({},e):n.isArray(e)?e.slice():e}function c(i){n.isUndefined(e[i])?n.isUndefined(t[i])||(r[i]=s(void 0,t[i])):r[i]=s(t[i],e[i])}n.forEach(i,(function(t){n.isUndefined(e[t])||(r[t]=s(void 0,e[t]))})),n.forEach(o,c),n.forEach(a,(function(i){n.isUndefined(e[i])?n.isUndefined(t[i])||(r[i]=s(void 0,t[i])):r[i]=s(void 0,e[i])})),n.forEach(u,(function(n){n in e?r[n]=s(t[n],e[n]):n in t&&(r[n]=s(void 0,t[n]))}));var f=i.concat(o).concat(a).concat(u),l=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===f.indexOf(t)}));return n.forEach(l,c),r}},8079:(t,e,r)=>{"use strict";var n=r(5971);t.exports=function(t,e,r){var i=r.config.validateStatus;r.status&&i&&!i(r.status)?e(n("Request failed with status code "+r.status,r.config,null,r.request,r)):t(r)}},8630:(t,e,r)=>{"use strict";var n=r(4030);t.exports=function(t,e,r){return n.forEach(r,(function(r){t=r(t,e)})),t}},457:(t,e,r)=>{"use strict";var n=r(4030),i=r(7122),o={"Content-Type":"application/x-www-form-urlencoded"};function a(t,e){!n.isUndefined(t)&&n.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var u,s={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(u=r(3155)),u),transformRequest:[function(t,e){return i(e,"Accept"),i(e,"Content-Type"),n.isFormData(t)||n.isArrayBuffer(t)||n.isBuffer(t)||n.isStream(t)||n.isFile(t)||n.isBlob(t)?t:n.isArrayBufferView(t)?t.buffer:n.isURLSearchParams(t)?(a(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):n.isObject(t)?(a(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};n.forEach(["delete","get","head"],(function(t){s.headers[t]={}})),n.forEach(["post","put","patch"],(function(t){s.headers[t]=n.merge(o)})),t.exports=s},3843:t=>{"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return t.apply(e,r)}}},7512:(t,e,r)=>{"use strict";var n=r(4030);function i(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var o;if(r)o=r(e);else if(n.isURLSearchParams(e))o=e.toString();else{var a=[];n.forEach(e,(function(t,e){null!=t&&(n.isArray(t)?e+="[]":t=[t],n.forEach(t,(function(t){n.isDate(t)?t=t.toISOString():n.isObject(t)&&(t=JSON.stringify(t)),a.push(i(e)+"="+i(t))})))})),o=a.join("&")}if(o){var u=t.indexOf("#");-1!==u&&(t=t.slice(0,u)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}},7050:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},4687:(t,e,r)=>{"use strict";var n=r(4030);t.exports=n.isStandardBrowserEnv()?{write:function(t,e,r,i,o,a){var u=[];u.push(t+"="+encodeURIComponent(e)),n.isNumber(r)&&u.push("expires="+new Date(r).toGMTString()),n.isString(i)&&u.push("path="+i),n.isString(o)&&u.push("domain="+o),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},957:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},232:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},5903:(t,e,r)=>{"use strict";var n=r(4030);t.exports=n.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function i(t){var n=t;return e&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=i(window.location.href),function(e){var r=n.isString(e)?i(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},7122:(t,e,r)=>{"use strict";var n=r(4030);t.exports=function(t,e){n.forEach(t,(function(r,n){n!==e&&n.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[n])}))}},924:(t,e,r)=>{"use strict";var n=r(4030),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,o,a={};return t?(n.forEach(t.split("\n"),(function(t){if(o=t.indexOf(":"),e=n.trim(t.substr(0,o)).toLowerCase(),r=n.trim(t.substr(o+1)),e){if(a[e]&&i.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([r]):a[e]?a[e]+", "+r:r}})),a):a}},1545:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},4030:(t,e,r)=>{"use strict";var n=r(3843),i=Object.prototype.toString;function o(t){return"[object Array]"===i.call(t)}function a(t){return void 0===t}function u(t){return null!==t&&"object"==typeof t}function s(t){if("[object Object]"!==i.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function c(t){return"[object Function]"===i.call(t)}function f(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),o(t))for(var r=0,n=t.length;r<n;r++)e.call(null,t[r],r,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}t.exports={isArray:o,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:function(t){return null!==t&&!a(t)&&null!==t.constructor&&!a(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:u,isPlainObject:s,isUndefined:a,isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:c,isStream:function(t){return u(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function t(){var e={};function r(r,n){s(e[n])&&s(r)?e[n]=t(e[n],r):s(r)?e[n]=t({},r):o(r)?e[n]=r.slice():e[n]=r}for(var n=0,i=arguments.length;n<i;n++)f(arguments[n],r);return e},extend:function(t,e,r){return f(e,(function(e,i){t[i]=r&&"function"==typeof e?n(e,r):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},5622:(t,e,r)=>{r(2154),r(9778),r(9981),r(8966),r(3564),r(5474),r(5550),r(2701),r(4673),r(3328),r(1078),r(91),r(1792),r(3992),r(3890),r(6260),r(9342),r(3478),r(311),r(8720),r(986),r(8866),r(3054),r(4772),r(8150),r(2268),r(344),r(651),r(9613),r(3329),r(751),r(8960),r(253),r(7330),r(7343),r(7944),r(1968),r(4290),r(7082),r(7454),r(4787),r(2033),r(2400),r(4523),r(3199),r(7704),r(5660),r(8600),r(4144),r(7272),r(5838),r(6362),r(4347),r(7794),r(7221),r(8541),r(4078),r(4152),r(3401),r(2041),r(3523),r(7973),r(255),r(7609),r(8760),r(735),r(4408),r(3211),r(7715),r(181),r(9907),r(8092),r(6769),r(2901),r(5264),r(1598),r(3414),r(6114),r(4075),r(5156),r(5642),r(1672),r(1681),r(844),r(9237),r(110),r(2119),r(9088),r(3758),r(3545),r(3895),r(7659),r(857),r(9114),r(3037),r(663),r(6507),r(6088),r(5183),r(1197),r(2822),r(4231),r(3850),r(6726),r(1274),r(8406),r(2983),r(9311),r(9965),r(8562),r(3663),r(2579),r(3972),r(76),r(3655),r(25),r(6757),r(2173),r(2126),r(6335),r(3757),r(1676),r(6338),r(9632),r(532),r(7495),r(3813),r(1930),r(8676),r(8701),r(5124),r(1621),r(7755),r(5197),r(2),r(8172),r(7301),r(2800),t.exports=r(9547)},4645:(t,e,r)=>{r(2328),t.exports=r(9547).Array.flatMap},239:(t,e,r)=>{r(2323),t.exports=r(9547).Array.includes},1689:(t,e,r)=>{r(1746),t.exports=r(9547).Object.entries},2107:(t,e,r)=>{r(5075),t.exports=r(9547).Object.getOwnPropertyDescriptors},5584:(t,e,r)=>{r(3119),t.exports=r(9547).Object.values},12:(t,e,r)=>{"use strict";r(9965),r(4219),t.exports=r(9547).Promise.finally},4113:(t,e,r)=>{r(1513),t.exports=r(9547).String.padEnd},164:(t,e,r)=>{r(8448),t.exports=r(9547).String.padStart},1775:(t,e,r)=>{r(5270),t.exports=r(9547).String.trimRight},8812:(t,e,r)=>{r(9274),t.exports=r(9547).String.trimLeft},4440:(t,e,r)=>{r(6692),t.exports=r(4692).f("asyncIterator")},1376:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},5894:(t,e,r)=>{var n=r(9805);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=n(t))throw TypeError(e);return+t}},1343:(t,e,r)=>{var n=r(2274)("unscopables"),i=Array.prototype;null==i[n]&&r(1874)(i,n,{}),t.exports=function(t){i[n][t]=!0}},8083:(t,e,r)=>{"use strict";var n=r(8918)(!0);t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},9646:t=>{t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},9944:(t,e,r)=>{var n=r(7375);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},879:(t,e,r)=>{"use strict";var n=r(9366),i=r(7212),o=r(1995);t.exports=[].copyWithin||function(t,e){var r=n(this),a=o(r.length),u=i(t,a),s=i(e,a),c=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===c?a:i(c,a))-s,a-u),l=1;for(s<u&&u<s+f&&(l=-1,s+=f-1,u+=f-1);f-- >0;)s in r?r[u]=r[s]:delete r[u],u+=l,s+=l;return r}},1499:(t,e,r)=>{"use strict";var n=r(9366),i=r(7212),o=r(1995);t.exports=function(t){for(var e=n(this),r=o(e.length),a=arguments.length,u=i(a>1?arguments[1]:void 0,r),s=a>2?arguments[2]:void 0,c=void 0===s?r:i(s,r);c>u;)e[u++]=t;return e}},6408:(t,e,r)=>{var n=r(8653),i=r(1995),o=r(7212);t.exports=function(t){return function(e,r,a){var u,s=n(e),c=i(s.length),f=o(a,c);if(t&&r!=r){for(;c>f;)if((u=s[f++])!=u)return!0}else for(;c>f;f++)if((t||f in s)&&s[f]===r)return t||f||0;return!t&&-1}}},8098:(t,e,r)=>{var n=r(8267),i=r(6060),o=r(9366),a=r(1995),u=r(412);t.exports=function(t,e){var r=1==t,s=2==t,c=3==t,f=4==t,l=6==t,p=5==t||l,h=e||u;return function(e,u,v){for(var d,g,y=o(e),m=i(y),b=n(u,v,3),x=a(m.length),w=0,S=r?h(e,x):s?h(e,0):void 0;x>w;w++)if((p||w in m)&&(g=b(d=m[w],w,y),t))if(r)S[w]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return w;case 2:S.push(d)}else if(f)return!1;return l?-1:c||f?f:S}}},9083:(t,e,r)=>{var n=r(1376),i=r(9366),o=r(6060),a=r(1995);t.exports=function(t,e,r,u,s){n(e);var c=i(t),f=o(c),l=a(c.length),p=s?l-1:0,h=s?-1:1;if(r<2)for(;;){if(p in f){u=f[p],p+=h;break}if(p+=h,s?p<0:l<=p)throw TypeError("Reduce of empty array with no initial value")}for(;s?p>=0:l>p;p+=h)p in f&&(u=e(u,f[p],p,c));return u}},4135:(t,e,r)=>{var n=r(7375),i=r(8846),o=r(2274)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),n(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},412:(t,e,r)=>{var n=r(4135);t.exports=function(t,e){return new(n(t))(e)}},4132:(t,e,r)=>{"use strict";var n=r(1376),i=r(7375),o=r(2849),a=[].slice,u={},s=function(t,e,r){if(!(e in u)){for(var n=[],i=0;i<e;i++)n[i]="a["+i+"]";u[e]=Function("F,a","return new F("+n.join(",")+")")}return u[e](t,r)};t.exports=Function.bind||function(t){var e=n(this),r=a.call(arguments,1),u=function(){var n=r.concat(a.call(arguments));return this instanceof u?s(e,n.length,n):o(e,n,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},7022:(t,e,r)=>{var n=r(9805),i=r(2274)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?r:o?n(e):"Object"==(a=n(e))&&"function"==typeof e.callee?"Arguments":a}},9805:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},2480:(t,e,r)=>{"use strict";var n=r(9048).f,i=r(3171),o=r(8076),a=r(8267),u=r(9646),s=r(7463),c=r(748),f=r(1623),l=r(1699),p=r(1391),h=r(8765).fastKey,v=r(3348),d=p?"_s":"size",g=function(t,e){var r,n=h(e);if("F"!==n)return t._i[n];for(r=t._f;r;r=r.n)if(r.k==e)return r};t.exports={getConstructor:function(t,e,r,c){var f=t((function(t,n){u(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[d]=0,null!=n&&s(n,r,t[c],t)}));return o(f.prototype,{clear:function(){for(var t=v(this,e),r=t._i,n=t._f;n;n=n.n)n.r=!0,n.p&&(n.p=n.p.n=void 0),delete r[n.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,e),n=g(r,t);if(n){var i=n.n,o=n.p;delete r._i[n.i],n.r=!0,o&&(o.n=i),i&&(i.p=o),r._f==n&&(r._f=i),r._l==n&&(r._l=o),r[d]--}return!!n},forEach:function(t){v(this,e);for(var r,n=a(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(n(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(v(this,e),t)}}),p&&n(f.prototype,"size",{get:function(){return v(this,e)[d]}}),f},def:function(t,e,r){var n,i,o=g(t,e);return o?o.v=r:(t._l=o={i:i=h(e,!0),k:e,v:r,p:n=t._l,n:void 0,r:!1},t._f||(t._f=o),n&&(n.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,e,r){c(t,e,(function(t,r){this._t=v(t,e),this._k=r,this._l=void 0}),(function(){for(var t=this,e=t._k,r=t._l;r&&r.r;)r=r.p;return t._t&&(t._l=r=r?r.n:t._t._f)?f(0,"keys"==e?r.k:"values"==e?r.v:[r.k,r.v]):(t._t=void 0,f(1))}),r?"entries":"values",!r,!0),l(e)}}},2238:(t,e,r)=>{"use strict";var n=r(8076),i=r(8765).getWeak,o=r(9944),a=r(7375),u=r(9646),s=r(7463),c=r(8098),f=r(3821),l=r(3348),p=c(5),h=c(6),v=0,d=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return p(t.a,(function(t){return t[0]===e}))};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var r=y(this,t);r?r[1]=e:this.a.push([t,e])},delete:function(t){var e=h(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,r,o){var c=t((function(t,n){u(t,c,e,"_i"),t._t=e,t._i=v++,t._l=void 0,null!=n&&s(n,r,t[o],t)}));return n(c.prototype,{delete:function(t){if(!a(t))return!1;var r=i(t);return!0===r?d(l(this,e)).delete(t):r&&f(r,this._i)&&delete r[this._i]},has:function(t){if(!a(t))return!1;var r=i(t);return!0===r?d(l(this,e)).has(t):r&&f(r,this._i)}}),c},def:function(t,e,r){var n=i(o(e),!0);return!0===n?d(t).set(e,r):n[t._i]=r,t},ufstore:d}},5787:(t,e,r)=>{"use strict";var n=r(5457),i=r(9005),o=r(9344),a=r(8076),u=r(8765),s=r(7463),c=r(9646),f=r(7375),l=r(8052),p=r(5399),h=r(6103),v=r(3809);t.exports=function(t,e,r,d,g,y){var m=n[t],b=m,x=g?"set":"add",w=b&&b.prototype,S={},_=function(t){var e=w[t];o(w,t,"delete"==t||"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,r){return e.call(this,0===t?0:t,r),this})};if("function"==typeof b&&(y||w.forEach&&!l((function(){(new b).entries().next()})))){var E=new b,O=E[x](y?{}:-0,1)!=E,k=l((function(){E.has(1)})),A=p((function(t){new b(t)})),P=!y&&l((function(){for(var t=new b,e=5;e--;)t[x](e,e);return!t.has(-0)}));A||((b=e((function(e,r){c(e,b,t);var n=v(new m,e,b);return null!=r&&s(r,g,n[x],n),n}))).prototype=w,w.constructor=b),(k||P)&&(_("delete"),_("has"),g&&_("get")),(P||O)&&_(x),y&&w.clear&&delete w.clear}else b=d.getConstructor(e,t,g,x),a(b.prototype,r),u.NEED=!0;return h(b,t),S[t]=b,i(i.G+i.W+i.F*(b!=m),S),y||d.setStrong(b,t,g),b}},9547:t=>{var e=t.exports={version:"2.6.12"};"number"==typeof __e&&(__e=e)},7862:(t,e,r)=>{"use strict";var n=r(9048),i=r(487);t.exports=function(t,e,r){e in t?n.f(t,e,i(0,r)):t[e]=r}},8267:(t,e,r)=>{var n=r(1376);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,i){return t.call(e,r,n,i)}}return function(){return t.apply(e,arguments)}}},8521:(t,e,r)=>{"use strict";var n=r(8052),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=n((function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-50000000000001))}))||!n((function(){o.call(new Date(NaN))}))?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),r=t.getUTCMilliseconds(),n=e<0?"-":e>9999?"+":"";return n+("00000"+Math.abs(e)).slice(n?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(r>99?r:"0"+a(r))+"Z"}:o},1723:(t,e,r)=>{"use strict";var n=r(9944),i=r(7408),o="number";t.exports=function(t){if("string"!==t&&t!==o&&"default"!==t)throw TypeError("Incorrect hint");return i(n(this),t!=o)}},1559:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},1391:(t,e,r)=>{t.exports=!r(8052)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},6406:(t,e,r)=>{var n=r(7375),i=r(5457).document,o=n(i)&&n(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},2892:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},7874:(t,e,r)=>{var n=r(7106),i=r(1587),o=r(4648);t.exports=function(t){var e=n(t),r=i.f;if(r)for(var a,u=r(t),s=o.f,c=0;u.length>c;)s.call(t,a=u[c++])&&e.push(a);return e}},9005:(t,e,r)=>{var n=r(5457),i=r(9547),o=r(1874),a=r(9344),u=r(8267),s=function(t,e,r){var c,f,l,p,h=t&s.F,v=t&s.G,d=t&s.S,g=t&s.P,y=t&s.B,m=v?n:d?n[e]||(n[e]={}):(n[e]||{}).prototype,b=v?i:i[e]||(i[e]={}),x=b.prototype||(b.prototype={});for(c in v&&(r=e),r)l=((f=!h&&m&&void 0!==m[c])?m:r)[c],p=y&&f?u(l,n):g&&"function"==typeof l?u(Function.call,l):l,m&&a(m,c,l,t&s.U),b[c]!=l&&o(b,c,p),g&&x[c]!=l&&(x[c]=l)};n.core=i,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},4088:(t,e,r)=>{var n=r(2274)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,!"/./"[t](e)}catch(t){}}return!0}},8052:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},5712:(t,e,r)=>{"use strict";r(4231);var n=r(9344),i=r(1874),o=r(8052),a=r(1559),u=r(2274),s=r(115),c=u("species"),f=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,e,r){var p=u(t),h=!o((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),v=h?!o((function(){var e=!1,r=/a/;return r.exec=function(){return e=!0,null},"split"===t&&(r.constructor={},r.constructor[c]=function(){return r}),r[p](""),!e})):void 0;if(!h||!v||"replace"===t&&!f||"split"===t&&!l){var d=/./[p],g=r(a,p,""[t],(function(t,e,r,n,i){return e.exec===s?h&&!i?{done:!0,value:d.call(e,r,n)}:{done:!0,value:t.call(r,e,n)}:{done:!1}})),y=g[0],m=g[1];n(String.prototype,t,y),i(RegExp.prototype,p,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},1576:(t,e,r)=>{"use strict";var n=r(9944);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},7597:(t,e,r)=>{"use strict";var n=r(8846),i=r(7375),o=r(1995),a=r(8267),u=r(2274)("isConcatSpreadable");t.exports=function t(e,r,s,c,f,l,p,h){for(var v,d,g=f,y=0,m=!!p&&a(p,h,3);y<c;){if(y in s){if(v=m?m(s[y],y,r):s[y],d=!1,i(v)&&(d=void 0!==(d=v[u])?!!d:n(v)),d&&l>0)g=t(e,r,v,o(v.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=v}g++}y++}return g}},7463:(t,e,r)=>{var n=r(8267),i=r(2456),o=r(2325),a=r(9944),u=r(1995),s=r(6649),c={},f={},l=t.exports=function(t,e,r,l,p){var h,v,d,g,y=p?function(){return t}:s(t),m=n(r,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(h=u(t.length);h>b;b++)if((g=e?m(a(v=t[b])[0],v[1]):m(t[b]))===c||g===f)return g}else for(d=y.call(t);!(v=d.next()).done;)if((g=i(d,m,v.value,e))===c||g===f)return g};l.BREAK=c,l.RETURN=f},8088:(t,e,r)=>{t.exports=r(1629)("native-function-to-string",Function.toString)},5457:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},3821:t=>{var e={}.hasOwnProperty;t.exports=function(t,r){return e.call(t,r)}},1874:(t,e,r)=>{var n=r(9048),i=r(487);t.exports=r(1391)?function(t,e,r){return n.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},5414:(t,e,r)=>{var n=r(5457).document;t.exports=n&&n.documentElement},6553:(t,e,r)=>{t.exports=!r(1391)&&!r(8052)((function(){return 7!=Object.defineProperty(r(6406)("div"),"a",{get:function(){return 7}}).a}))},3809:(t,e,r)=>{var n=r(7375),i=r(2549).set;t.exports=function(t,e,r){var o,a=e.constructor;return a!==r&&"function"==typeof a&&(o=a.prototype)!==r.prototype&&n(o)&&i&&i(t,o),t}},2849:t=>{t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},6060:(t,e,r)=>{var n=r(9805);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},2325:(t,e,r)=>{var n=r(5616),i=r(2274)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||o[i]===t)}},8846:(t,e,r)=>{var n=r(9805);t.exports=Array.isArray||function(t){return"Array"==n(t)}},8177:(t,e,r)=>{var n=r(7375),i=Math.floor;t.exports=function(t){return!n(t)&&isFinite(t)&&i(t)===t}},7375:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},786:(t,e,r)=>{var n=r(7375),i=r(9805),o=r(2274)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},2456:(t,e,r)=>{var n=r(9944);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},5242:(t,e,r)=>{"use strict";var n=r(3171),i=r(487),o=r(6103),a={};r(1874)(a,r(2274)("iterator"),(function(){return this})),t.exports=function(t,e,r){t.prototype=n(a,{next:i(1,r)}),o(t,e+" Iterator")}},748:(t,e,r)=>{"use strict";var n=r(409),i=r(9005),o=r(9344),a=r(1874),u=r(5616),s=r(5242),c=r(6103),f=r(662),l=r(2274)("iterator"),p=!([].keys&&"next"in[].keys()),h="keys",v="values",d=function(){return this};t.exports=function(t,e,r,g,y,m,b){s(r,e,g);var x,w,S,_=function(t){if(!p&&t in A)return A[t];switch(t){case h:case v:return function(){return new r(this,t)}}return function(){return new r(this,t)}},E=e+" Iterator",O=y==v,k=!1,A=t.prototype,P=A[l]||A["@@iterator"]||y&&A[y],j=P||_(y),F=y?O?_("entries"):j:void 0,L="Array"==e&&A.entries||P;if(L&&(S=f(L.call(new t)))!==Object.prototype&&S.next&&(c(S,E,!0),n||"function"==typeof S[l]||a(S,l,d)),O&&P&&P.name!==v&&(k=!0,j=function(){return P.call(this)}),n&&!b||!p&&!k&&A[l]||a(A,l,j),u[e]=j,u[E]=d,y)if(x={values:O?j:_(v),keys:m?j:_(h),entries:F},b)for(w in x)w in A||o(A,w,x[w]);else i(i.P+i.F*(p||k),e,x);return x}},5399:(t,e,r)=>{var n=r(2274)("iterator"),i=!1;try{var o=[7][n]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var r=!1;try{var o=[7],a=o[n]();a.next=function(){return{done:r=!0}},o[n]=function(){return a},t(o)}catch(t){}return r}},1623:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},5616:t=>{t.exports={}},409:t=>{t.exports=!1},1028:t=>{var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},3081:(t,e,r)=>{var n=r(492),i=Math.pow,o=i(2,-52),a=i(2,-23),u=i(2,127)*(2-a),s=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=Math.abs(t),c=n(t);return i<s?c*(i/s/a+1/o-1/o)*s*a:(r=(e=(1+a/o)*i)-(e-i))>u||r!=r?c*(1/0):c*r}},6557:t=>{t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},492:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},8765:(t,e,r)=>{var n=r(4197)("meta"),i=r(7375),o=r(3821),a=r(9048).f,u=0,s=Object.isExtensible||function(){return!0},c=!r(8052)((function(){return s(Object.preventExtensions({}))})),f=function(t){a(t,n,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:n,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,n)){if(!s(t))return"F";if(!e)return"E";f(t)}return t[n].i},getWeak:function(t,e){if(!o(t,n)){if(!s(t))return!0;if(!e)return!1;f(t)}return t[n].w},onFreeze:function(t){return c&&l.NEED&&s(t)&&!o(t,n)&&f(t),t}}},9392:(t,e,r)=>{var n=r(5457),i=r(4756).set,o=n.MutationObserver||n.WebKitMutationObserver,a=n.process,u=n.Promise,s="process"==r(9805)(a);t.exports=function(){var t,e,r,c=function(){var n,i;for(s&&(n=a.domain)&&n.exit();t;){i=t.fn,t=t.next;try{i()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(s)r=function(){a.nextTick(c)};else if(!o||n.navigator&&n.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);r=function(){f.then(c)}}else r=function(){i.call(n,c)};else{var l=!0,p=document.createTextNode("");new o(c).observe(p,{characterData:!0}),r=function(){p.data=l=!l}}return function(n){var i={fn:n,next:void 0};e&&(e.next=i),t||(t=i,r()),e=i}}},4621:(t,e,r)=>{"use strict";var n=r(1376);function i(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)}t.exports.f=function(t){return new i(t)}},7103:(t,e,r)=>{"use strict";var n=r(1391),i=r(7106),o=r(1587),a=r(4648),u=r(9366),s=r(6060),c=Object.assign;t.exports=!c||r(8052)((function(){var t={},e={},r=Symbol(),n="abcdefghijklmnopqrst";return t[r]=7,n.split("").forEach((function(t){e[t]=t})),7!=c({},t)[r]||Object.keys(c({},e)).join("")!=n}))?function(t,e){for(var r=u(t),c=arguments.length,f=1,l=o.f,p=a.f;c>f;)for(var h,v=s(arguments[f++]),d=l?i(v).concat(l(v)):i(v),g=d.length,y=0;g>y;)h=d[y++],n&&!p.call(v,h)||(r[h]=v[h]);return r}:c},3171:(t,e,r)=>{var n=r(9944),i=r(5046),o=r(2892),a=r(8261)("IE_PROTO"),u=function(){},s=function(){var t,e=r(6406)("iframe"),n=o.length;for(e.style.display="none",r(5414).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;n--;)delete s.prototype[o[n]];return s()};t.exports=Object.create||function(t,e){var r;return null!==t?(u.prototype=n(t),r=new u,u.prototype=null,r[a]=t):r=s(),void 0===e?r:i(r,e)}},9048:(t,e,r)=>{var n=r(9944),i=r(6553),o=r(7408),a=Object.defineProperty;e.f=r(1391)?Object.defineProperty:function(t,e,r){if(n(t),e=o(e,!0),n(r),i)try{return a(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},5046:(t,e,r)=>{var n=r(9048),i=r(9944),o=r(7106);t.exports=r(1391)?Object.defineProperties:function(t,e){i(t);for(var r,a=o(e),u=a.length,s=0;u>s;)n.f(t,r=a[s++],e[r]);return t}},1610:(t,e,r)=>{var n=r(4648),i=r(487),o=r(8653),a=r(7408),u=r(3821),s=r(6553),c=Object.getOwnPropertyDescriptor;e.f=r(1391)?c:function(t,e){if(t=o(t),e=a(e,!0),s)try{return c(t,e)}catch(t){}if(u(t,e))return i(!n.f.call(t,e),t[e])}},7065:(t,e,r)=>{var n=r(8653),i=r(5033).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(n(t))}},5033:(t,e,r)=>{var n=r(7612),i=r(2892).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,i)}},1587:(t,e)=>{e.f=Object.getOwnPropertySymbols},662:(t,e,r)=>{var n=r(3821),i=r(9366),o=r(8261)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),n(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},7612:(t,e,r)=>{var n=r(3821),i=r(8653),o=r(6408)(!1),a=r(8261)("IE_PROTO");t.exports=function(t,e){var r,u=i(t),s=0,c=[];for(r in u)r!=a&&n(u,r)&&c.push(r);for(;e.length>s;)n(u,r=e[s++])&&(~o(c,r)||c.push(r));return c}},7106:(t,e,r)=>{var n=r(7612),i=r(2892);t.exports=Object.keys||function(t){return n(t,i)}},4648:(t,e)=>{e.f={}.propertyIsEnumerable},347:(t,e,r)=>{var n=r(9005),i=r(9547),o=r(8052);t.exports=function(t,e){var r=(i.Object||{})[t]||Object[t],a={};a[t]=e(r),n(n.S+n.F*o((function(){r(1)})),"Object",a)}},9776:(t,e,r)=>{var n=r(1391),i=r(7106),o=r(8653),a=r(4648).f;t.exports=function(t){return function(e){for(var r,u=o(e),s=i(u),c=s.length,f=0,l=[];c>f;)r=s[f++],n&&!a.call(u,r)||l.push(t?[r,u[r]]:u[r]);return l}}},553:(t,e,r)=>{var n=r(5033),i=r(1587),o=r(9944),a=r(5457).Reflect;t.exports=a&&a.ownKeys||function(t){var e=n.f(o(t)),r=i.f;return r?e.concat(r(t)):e}},313:(t,e,r)=>{var n=r(5457).parseFloat,i=r(9570).trim;t.exports=1/n(r(1686)+"-0")!=-1/0?function(t){var e=i(String(t),3),r=n(e);return 0===r&&"-"==e.charAt(0)?-0:r}:n},3064:(t,e,r)=>{var n=r(5457).parseInt,i=r(9570).trim,o=r(1686),a=/^[-+]?0[xX]/;t.exports=8!==n(o+"08")||22!==n(o+"0x16")?function(t,e){var r=i(String(t),3);return n(r,e>>>0||(a.test(r)?16:10))}:n},302:t=>{t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},2832:(t,e,r)=>{var n=r(9944),i=r(7375),o=r(4621);t.exports=function(t,e){if(n(t),i(e)&&e.constructor===t)return e;var r=o.f(t);return(0,r.resolve)(e),r.promise}},487:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},8076:(t,e,r)=>{var n=r(9344);t.exports=function(t,e,r){for(var i in e)n(t,i,e[i],r);return t}},9344:(t,e,r)=>{var n=r(5457),i=r(1874),o=r(3821),a=r(4197)("src"),u=r(8088),s="toString",c=(""+u).split(s);r(9547).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,r,u){var s="function"==typeof r;s&&(o(r,"name")||i(r,"name",e)),t[e]!==r&&(s&&(o(r,a)||i(r,a,t[e]?""+t[e]:c.join(String(e)))),t===n?t[e]=r:u?t[e]?t[e]=r:i(t,e,r):(delete t[e],i(t,e,r)))})(Function.prototype,s,(function(){return"function"==typeof this&&this[a]||u.call(this)}))},8371:(t,e,r)=>{"use strict";var n=r(7022),i=RegExp.prototype.exec;t.exports=function(t,e){var r=t.exec;if("function"==typeof r){var o=r.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==n(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},115:(t,e,r)=>{"use strict";var n,i,o=r(1576),a=RegExp.prototype.exec,u=String.prototype.replace,s=a,c=(n=/a/,i=/b*/g,a.call(n,"a"),a.call(i,"a"),0!==n.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(s=function(t){var e,r,n,i,s=this;return f&&(r=new RegExp("^"+s.source+"$(?!\\s)",o.call(s))),c&&(e=s.lastIndex),n=a.call(s,t),c&&n&&(s.lastIndex=s.global?n.index+n[0].length:e),f&&n&&n.length>1&&u.call(n[0],r,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(n[i]=void 0)})),n}),t.exports=s},4267:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},2549:(t,e,r)=>{var n=r(7375),i=r(9944),o=function(t,e){if(i(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(8267)(Function.call,r(1610).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return o(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:o}},1699:(t,e,r)=>{"use strict";var n=r(5457),i=r(9048),o=r(1391),a=r(2274)("species");t.exports=function(t){var e=n[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},6103:(t,e,r)=>{var n=r(9048).f,i=r(3821),o=r(2274)("toStringTag");t.exports=function(t,e,r){t&&!i(t=r?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},8261:(t,e,r)=>{var n=r(1629)("keys"),i=r(4197);t.exports=function(t){return n[t]||(n[t]=i(t))}},1629:(t,e,r)=>{var n=r(9547),i=r(5457),o="__core-js_shared__",a=i[o]||(i[o]={});(t.exports=function(t,e){return a[t]||(a[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(409)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},1706:(t,e,r)=>{var n=r(9944),i=r(1376),o=r(2274)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[o])?e:i(r)}},3116:(t,e,r)=>{"use strict";var n=r(8052);t.exports=function(t,e){return!!t&&n((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},8918:(t,e,r)=>{var n=r(8571),i=r(1559);t.exports=function(t){return function(e,r){var o,a,u=String(i(e)),s=n(r),c=u.length;return s<0||s>=c?t?"":void 0:(o=u.charCodeAt(s))<55296||o>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):o:t?u.slice(s,s+2):a-56320+(o-55296<<10)+65536}}},4221:(t,e,r)=>{var n=r(786),i=r(1559);t.exports=function(t,e,r){if(n(e))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},3645:(t,e,r)=>{var n=r(9005),i=r(8052),o=r(1559),a=/"/g,u=function(t,e,r,n){var i=String(o(t)),u="<"+e;return""!==r&&(u+=" "+r+'="'+String(n).replace(a,"&quot;")+'"'),u+">"+i+"</"+e+">"};t.exports=function(t,e){var r={};r[t]=e(u),n(n.P+n.F*i((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3})),"String",r)}},3364:(t,e,r)=>{var n=r(1995),i=r(1971),o=r(1559);t.exports=function(t,e,r,a){var u=String(o(t)),s=u.length,c=void 0===r?" ":String(r),f=n(e);if(f<=s||""==c)return u;var l=f-s,p=i.call(c,Math.ceil(l/c.length));return p.length>l&&(p=p.slice(0,l)),a?p+u:u+p}},1971:(t,e,r)=>{"use strict";var n=r(8571),i=r(1559);t.exports=function(t){var e=String(i(this)),r="",o=n(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(r+=e);return r}},9570:(t,e,r)=>{var n=r(9005),i=r(1559),o=r(8052),a=r(1686),u="["+a+"]",s=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),f=function(t,e,r){var i={},u=o((function(){return!!a[t]()||"​"!="​"[t]()})),s=i[t]=u?e(l):a[t];r&&(i[r]=s),n(n.P+n.F*u,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(s,"")),2&e&&(t=t.replace(c,"")),t};t.exports=f},1686:t=>{t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},4756:(t,e,r)=>{var n,i,o,a=r(8267),u=r(2849),s=r(5414),c=r(6406),f=r(5457),l=f.process,p=f.setImmediate,h=f.clearImmediate,v=f.MessageChannel,d=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};p&&h||(p=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return y[++g]=function(){u("function"==typeof t?t:Function(t),e)},n(g),g},h=function(t){delete y[t]},"process"==r(9805)(l)?n=function(t){l.nextTick(a(m,t,1))}:d&&d.now?n=function(t){d.now(a(m,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=b,n=a(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in c("script")?function(t){s.appendChild(c("script")).onreadystatechange=function(){s.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:p,clear:h}},7212:(t,e,r)=>{var n=r(8571),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=n(t))<0?i(t+e,0):o(t,e)}},4706:(t,e,r)=>{var n=r(8571),i=r(1995);t.exports=function(t){if(void 0===t)return 0;var e=n(t),r=i(e);if(e!==r)throw RangeError("Wrong length!");return r}},8571:t=>{var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},8653:(t,e,r)=>{var n=r(6060),i=r(1559);t.exports=function(t){return n(i(t))}},1995:(t,e,r)=>{var n=r(8571),i=Math.min;t.exports=function(t){return t>0?i(n(t),9007199254740991):0}},9366:(t,e,r)=>{var n=r(1559);t.exports=function(t){return Object(n(t))}},7408:(t,e,r)=>{var n=r(7375);t.exports=function(t,e){if(!n(t))return t;var r,i;if(e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!n(i=r.call(t)))return i;if(!e&&"function"==typeof(r=t.toString)&&!n(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},3513:(t,e,r)=>{"use strict";if(r(1391)){var n=r(409),i=r(5457),o=r(8052),a=r(9005),u=r(6229),s=r(9130),c=r(8267),f=r(9646),l=r(487),p=r(1874),h=r(8076),v=r(8571),d=r(1995),g=r(4706),y=r(7212),m=r(7408),b=r(3821),x=r(7022),w=r(7375),S=r(9366),_=r(2325),E=r(3171),O=r(662),k=r(5033).f,A=r(6649),P=r(4197),j=r(2274),F=r(8098),L=r(6408),M=r(1706),I=r(1197),N=r(5616),T=r(5399),R=r(1699),C=r(1499),D=r(879),U=r(9048),B=r(1610),q=U.f,V=B.f,W=i.RangeError,G=i.TypeError,z=i.Uint8Array,H="ArrayBuffer",J="SharedArrayBuffer",$="BYTES_PER_ELEMENT",X=Array.prototype,Y=s.ArrayBuffer,K=s.DataView,Z=F(0),Q=F(2),tt=F(3),et=F(4),rt=F(5),nt=F(6),it=L(!0),ot=L(!1),at=I.values,ut=I.keys,st=I.entries,ct=X.lastIndexOf,ft=X.reduce,lt=X.reduceRight,pt=X.join,ht=X.sort,vt=X.slice,dt=X.toString,gt=X.toLocaleString,yt=j("iterator"),mt=j("toStringTag"),bt=P("typed_constructor"),xt=P("def_constructor"),wt=u.CONSTR,St=u.TYPED,_t=u.VIEW,Et="Wrong length!",Ot=F(1,(function(t,e){return Ft(M(t,t[xt]),e)})),kt=o((function(){return 1===new z(new Uint16Array([1]).buffer)[0]})),At=!!z&&!!z.prototype.set&&o((function(){new z(1).set({})})),Pt=function(t,e){var r=v(t);if(r<0||r%e)throw W("Wrong offset!");return r},jt=function(t){if(w(t)&&St in t)return t;throw G(t+" is not a typed array!")},Ft=function(t,e){if(!w(t)||!(bt in t))throw G("It is not a typed array constructor!");return new t(e)},Lt=function(t,e){return Mt(M(t,t[xt]),e)},Mt=function(t,e){for(var r=0,n=e.length,i=Ft(t,n);n>r;)i[r]=e[r++];return i},It=function(t,e,r){q(t,e,{get:function(){return this._d[r]}})},Nt=function(t){var e,r,n,i,o,a,u=S(t),s=arguments.length,f=s>1?arguments[1]:void 0,l=void 0!==f,p=A(u);if(null!=p&&!_(p)){for(a=p.call(u),n=[],e=0;!(o=a.next()).done;e++)n.push(o.value);u=n}for(l&&s>2&&(f=c(f,arguments[2],2)),e=0,r=d(u.length),i=Ft(this,r);r>e;e++)i[e]=l?f(u[e],e):u[e];return i},Tt=function(){for(var t=0,e=arguments.length,r=Ft(this,e);e>t;)r[t]=arguments[t++];return r},Rt=!!z&&o((function(){gt.call(new z(1))})),Ct=function(){return gt.apply(Rt?vt.call(jt(this)):jt(this),arguments)},Dt={copyWithin:function(t,e){return D.call(jt(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return et(jt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return C.apply(jt(this),arguments)},filter:function(t){return Lt(this,Q(jt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return rt(jt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return nt(jt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Z(jt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return ot(jt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return it(jt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return pt.apply(jt(this),arguments)},lastIndexOf:function(t){return ct.apply(jt(this),arguments)},map:function(t){return Ot(jt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ft.apply(jt(this),arguments)},reduceRight:function(t){return lt.apply(jt(this),arguments)},reverse:function(){for(var t,e=this,r=jt(e).length,n=Math.floor(r/2),i=0;i<n;)t=e[i],e[i++]=e[--r],e[r]=t;return e},some:function(t){return tt(jt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ht.call(jt(this),t)},subarray:function(t,e){var r=jt(this),n=r.length,i=y(t,n);return new(M(r,r[xt]))(r.buffer,r.byteOffset+i*r.BYTES_PER_ELEMENT,d((void 0===e?n:y(e,n))-i))}},Ut=function(t,e){return Lt(this,vt.call(jt(this),t,e))},Bt=function(t){jt(this);var e=Pt(arguments[1],1),r=this.length,n=S(t),i=d(n.length),o=0;if(i+e>r)throw W(Et);for(;o<i;)this[e+o]=n[o++]},qt={entries:function(){return st.call(jt(this))},keys:function(){return ut.call(jt(this))},values:function(){return at.call(jt(this))}},Vt=function(t,e){return w(t)&&t[St]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Wt=function(t,e){return Vt(t,e=m(e,!0))?l(2,t[e]):V(t,e)},Gt=function(t,e,r){return!(Vt(t,e=m(e,!0))&&w(r)&&b(r,"value"))||b(r,"get")||b(r,"set")||r.configurable||b(r,"writable")&&!r.writable||b(r,"enumerable")&&!r.enumerable?q(t,e,r):(t[e]=r.value,t)};wt||(B.f=Wt,U.f=Gt),a(a.S+a.F*!wt,"Object",{getOwnPropertyDescriptor:Wt,defineProperty:Gt}),o((function(){dt.call({})}))&&(dt=gt=function(){return pt.call(this)});var zt=h({},Dt);h(zt,qt),p(zt,yt,qt.values),h(zt,{slice:Ut,set:Bt,constructor:function(){},toString:dt,toLocaleString:Ct}),It(zt,"buffer","b"),It(zt,"byteOffset","o"),It(zt,"byteLength","l"),It(zt,"length","e"),q(zt,mt,{get:function(){return this[St]}}),t.exports=function(t,e,r,s){var c=t+((s=!!s)?"Clamped":"")+"Array",l="get"+t,h="set"+t,v=i[c],y=v||{},m=v&&O(v),b=!v||!u.ABV,S={},_=v&&v.prototype,A=function(t,r){q(t,r,{get:function(){return function(t,r){var n=t._d;return n.v[l](r*e+n.o,kt)}(this,r)},set:function(t){return function(t,r,n){var i=t._d;s&&(n=(n=Math.round(n))<0?0:n>255?255:255&n),i.v[h](r*e+i.o,n,kt)}(this,r,t)},enumerable:!0})};b?(v=r((function(t,r,n,i){f(t,v,c,"_d");var o,a,u,s,l=0,h=0;if(w(r)){if(!(r instanceof Y||(s=x(r))==H||s==J))return St in r?Mt(v,r):Nt.call(v,r);o=r,h=Pt(n,e);var y=r.byteLength;if(void 0===i){if(y%e)throw W(Et);if((a=y-h)<0)throw W(Et)}else if((a=d(i)*e)+h>y)throw W(Et);u=a/e}else u=g(r),o=new Y(a=u*e);for(p(t,"_d",{b:o,o:h,l:a,e:u,v:new K(o)});l<u;)A(t,l++)})),_=v.prototype=E(zt),p(_,"constructor",v)):o((function(){v(1)}))&&o((function(){new v(-1)}))&&T((function(t){new v,new v(null),new v(1.5),new v(t)}),!0)||(v=r((function(t,r,n,i){var o;return f(t,v,c),w(r)?r instanceof Y||(o=x(r))==H||o==J?void 0!==i?new y(r,Pt(n,e),i):void 0!==n?new y(r,Pt(n,e)):new y(r):St in r?Mt(v,r):Nt.call(v,r):new y(g(r))})),Z(m!==Function.prototype?k(y).concat(k(m)):k(y),(function(t){t in v||p(v,t,y[t])})),v.prototype=_,n||(_.constructor=v));var P=_[yt],j=!!P&&("values"==P.name||null==P.name),F=qt.values;p(v,bt,!0),p(_,St,c),p(_,_t,!0),p(_,xt,v),(s?new v(1)[mt]==c:mt in _)||q(_,mt,{get:function(){return c}}),S[c]=v,a(a.G+a.W+a.F*(v!=y),S),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*o((function(){y.of.call(v,1)})),c,{from:Nt,of:Tt}),$ in _||p(_,$,e),a(a.P,c,Dt),R(c),a(a.P+a.F*At,c,{set:Bt}),a(a.P+a.F*!j,c,qt),n||_.toString==dt||(_.toString=dt),a(a.P+a.F*o((function(){new v(1).slice()})),c,{slice:Ut}),a(a.P+a.F*(o((function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()}))||!o((function(){_.toLocaleString.call([1,2])}))),c,{toLocaleString:Ct}),N[c]=j?P:F,n||j||p(_,yt,F)}}else t.exports=function(){}},9130:(t,e,r)=>{"use strict";var n=r(5457),i=r(1391),o=r(409),a=r(6229),u=r(1874),s=r(8076),c=r(8052),f=r(9646),l=r(8571),p=r(1995),h=r(4706),v=r(5033).f,d=r(9048).f,g=r(1499),y=r(6103),m="ArrayBuffer",b="DataView",x="Wrong index!",w=n.ArrayBuffer,S=n.DataView,_=n.Math,E=n.RangeError,O=n.Infinity,k=w,A=_.abs,P=_.pow,j=_.floor,F=_.log,L=_.LN2,M="buffer",I="byteLength",N="byteOffset",T=i?"_b":M,R=i?"_l":I,C=i?"_o":N;function D(t,e,r){var n,i,o,a=new Array(r),u=8*r-e-1,s=(1<<u)-1,c=s>>1,f=23===e?P(2,-24)-P(2,-77):0,l=0,p=t<0||0===t&&1/t<0?1:0;for((t=A(t))!=t||t===O?(i=t!=t?1:0,n=s):(n=j(F(t)/L),t*(o=P(2,-n))<1&&(n--,o*=2),(t+=n+c>=1?f/o:f*P(2,1-c))*o>=2&&(n++,o/=2),n+c>=s?(i=0,n=s):n+c>=1?(i=(t*o-1)*P(2,e),n+=c):(i=t*P(2,c-1)*P(2,e),n=0));e>=8;a[l++]=255&i,i/=256,e-=8);for(n=n<<e|i,u+=e;u>0;a[l++]=255&n,n/=256,u-=8);return a[--l]|=128*p,a}function U(t,e,r){var n,i=8*r-e-1,o=(1<<i)-1,a=o>>1,u=i-7,s=r-1,c=t[s--],f=127&c;for(c>>=7;u>0;f=256*f+t[s],s--,u-=8);for(n=f&(1<<-u)-1,f>>=-u,u+=e;u>0;n=256*n+t[s],s--,u-=8);if(0===f)f=1-a;else{if(f===o)return n?NaN:c?-O:O;n+=P(2,e),f-=a}return(c?-1:1)*n*P(2,f-e)}function B(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function q(t){return[255&t]}function V(t){return[255&t,t>>8&255]}function W(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function G(t){return D(t,52,8)}function z(t){return D(t,23,4)}function H(t,e,r){d(t.prototype,e,{get:function(){return this[r]}})}function J(t,e,r,n){var i=h(+r);if(i+e>t[R])throw E(x);var o=t[T]._b,a=i+t[C],u=o.slice(a,a+e);return n?u:u.reverse()}function $(t,e,r,n,i,o){var a=h(+r);if(a+e>t[R])throw E(x);for(var u=t[T]._b,s=a+t[C],c=n(+i),f=0;f<e;f++)u[s+f]=c[o?f:e-f-1]}if(a.ABV){if(!c((function(){w(1)}))||!c((function(){new w(-1)}))||c((function(){return new w,new w(1.5),new w(NaN),w.name!=m}))){for(var X,Y=(w=function(t){return f(this,w),new k(h(t))}).prototype=k.prototype,K=v(k),Z=0;K.length>Z;)(X=K[Z++])in w||u(w,X,k[X]);o||(Y.constructor=w)}var Q=new S(new w(2)),tt=S.prototype.setInt8;Q.setInt8(0,2147483648),Q.setInt8(1,2147483649),!Q.getInt8(0)&&Q.getInt8(1)||s(S.prototype,{setInt8:function(t,e){tt.call(this,t,e<<24>>24)},setUint8:function(t,e){tt.call(this,t,e<<24>>24)}},!0)}else w=function(t){f(this,w,m);var e=h(t);this._b=g.call(new Array(e),0),this[R]=e},S=function(t,e,r){f(this,S,b),f(t,w,b);var n=t[R],i=l(e);if(i<0||i>n)throw E("Wrong offset!");if(i+(r=void 0===r?n-i:p(r))>n)throw E("Wrong length!");this[T]=t,this[C]=i,this[R]=r},i&&(H(w,I,"_l"),H(S,M,"_b"),H(S,I,"_l"),H(S,N,"_o")),s(S.prototype,{getInt8:function(t){return J(this,1,t)[0]<<24>>24},getUint8:function(t){return J(this,1,t)[0]},getInt16:function(t){var e=J(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=J(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return B(J(this,4,t,arguments[1]))},getUint32:function(t){return B(J(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return U(J(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return U(J(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){$(this,1,t,q,e)},setUint8:function(t,e){$(this,1,t,q,e)},setInt16:function(t,e){$(this,2,t,V,e,arguments[2])},setUint16:function(t,e){$(this,2,t,V,e,arguments[2])},setInt32:function(t,e){$(this,4,t,W,e,arguments[2])},setUint32:function(t,e){$(this,4,t,W,e,arguments[2])},setFloat32:function(t,e){$(this,4,t,z,e,arguments[2])},setFloat64:function(t,e){$(this,8,t,G,e,arguments[2])}});y(w,m),y(S,b),u(S.prototype,a.VIEW,!0),e.ArrayBuffer=w,e.DataView=S},6229:(t,e,r)=>{for(var n,i=r(5457),o=r(1874),a=r(4197),u=a("typed_array"),s=a("view"),c=!(!i.ArrayBuffer||!i.DataView),f=c,l=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(n=i[p[l++]])?(o(n.prototype,u,!0),o(n.prototype,s,!0)):f=!1;t.exports={ABV:c,CONSTR:f,TYPED:u,VIEW:s}},4197:t=>{var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},8749:(t,e,r)=>{var n=r(5457).navigator;t.exports=n&&n.userAgent||""},3348:(t,e,r)=>{var n=r(7375);t.exports=function(t,e){if(!n(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},1873:(t,e,r)=>{var n=r(5457),i=r(9547),o=r(409),a=r(4692),u=r(9048).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:n.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},4692:(t,e,r)=>{e.f=r(2274)},2274:(t,e,r)=>{var n=r(1629)("wks"),i=r(4197),o=r(5457).Symbol,a="function"==typeof o;(t.exports=function(t){return n[t]||(n[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=n},6649:(t,e,r)=>{var n=r(7022),i=r(2274)("iterator"),o=r(5616);t.exports=r(9547).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[n(t)]}},3037:(t,e,r)=>{var n=r(9005);n(n.P,"Array",{copyWithin:r(879)}),r(1343)("copyWithin")},3545:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(4);n(n.P+n.F*!r(3116)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},663:(t,e,r)=>{var n=r(9005);n(n.P,"Array",{fill:r(1499)}),r(1343)("fill")},9088:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(2);n(n.P+n.F*!r(3116)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},6088:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(6),o="findIndex",a=!0;o in[]&&Array(1)[o]((function(){a=!1})),n(n.P+n.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(1343)(o)},6507:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(5),o="find",a=!0;o in[]&&Array(1).find((function(){a=!1})),n(n.P+n.F*a,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(1343)(o)},110:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(0),o=r(3116)([].forEach,!0);n(n.P+n.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},5642:(t,e,r)=>{"use strict";var n=r(8267),i=r(9005),o=r(9366),a=r(2456),u=r(2325),s=r(1995),c=r(7862),f=r(6649);i(i.S+i.F*!r(5399)((function(t){Array.from(t)})),"Array",{from:function(t){var e,r,i,l,p=o(t),h="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,y=0,m=f(p);if(g&&(d=n(d,v>2?arguments[2]:void 0,2)),null==m||h==Array&&u(m))for(r=new h(e=s(p.length));e>y;y++)c(r,y,g?d(p[y],y):p[y]);else for(l=m.call(p),r=new h;!(i=l.next()).done;y++)c(r,y,g?a(l,d,[i.value,y],!0):i.value);return r.length=y,r}})},857:(t,e,r)=>{"use strict";var n=r(9005),i=r(6408)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;n(n.P+n.F*(a||!r(3116)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},5156:(t,e,r)=>{var n=r(9005);n(n.S,"Array",{isArray:r(8846)})},1197:(t,e,r)=>{"use strict";var n=r(1343),i=r(1623),o=r(5616),a=r(8653);t.exports=r(748)(Array,"Array",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])}),"values"),o.Arguments=o.Array,n("keys"),n("values"),n("entries")},1681:(t,e,r)=>{"use strict";var n=r(9005),i=r(8653),o=[].join;n(n.P+n.F*(r(6060)!=Object||!r(3116)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},9114:(t,e,r)=>{"use strict";var n=r(9005),i=r(8653),o=r(8571),a=r(1995),u=[].lastIndexOf,s=!!u&&1/[1].lastIndexOf(1,-0)<0;n(n.P+n.F*(s||!r(3116)(u)),"Array",{lastIndexOf:function(t){if(s)return u.apply(this,arguments)||0;var e=i(this),r=a(e.length),n=r-1;for(arguments.length>1&&(n=Math.min(n,o(arguments[1]))),n<0&&(n=r+n);n>=0;n--)if(n in e&&e[n]===t)return n||0;return-1}})},2119:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(1);n(n.P+n.F*!r(3116)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},1672:(t,e,r)=>{"use strict";var n=r(9005),i=r(7862);n(n.S+n.F*r(8052)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),"Array",{of:function(){for(var t=0,e=arguments.length,r=new("function"==typeof this?this:Array)(e);e>t;)i(r,t,arguments[t++]);return r.length=e,r}})},7659:(t,e,r)=>{"use strict";var n=r(9005),i=r(9083);n(n.P+n.F*!r(3116)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},3895:(t,e,r)=>{"use strict";var n=r(9005),i=r(9083);n(n.P+n.F*!r(3116)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},844:(t,e,r)=>{"use strict";var n=r(9005),i=r(5414),o=r(9805),a=r(7212),u=r(1995),s=[].slice;n(n.P+n.F*r(8052)((function(){i&&s.call(i)})),"Array",{slice:function(t,e){var r=u(this.length),n=o(this);if(e=void 0===e?r:e,"Array"==n)return s.call(this,t,e);for(var i=a(t,r),c=a(e,r),f=u(c-i),l=new Array(f),p=0;p<f;p++)l[p]="String"==n?this.charAt(i+p):this[i+p];return l}})},3758:(t,e,r)=>{"use strict";var n=r(9005),i=r(8098)(3);n(n.P+n.F*!r(3116)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},9237:(t,e,r)=>{"use strict";var n=r(9005),i=r(1376),o=r(9366),a=r(8052),u=[].sort,s=[1,2,3];n(n.P+n.F*(a((function(){s.sort(void 0)}))||!a((function(){s.sort(null)}))||!r(3116)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},5183:(t,e,r)=>{r(1699)("Array")},5264:(t,e,r)=>{var n=r(9005);n(n.S,"Date",{now:function(){return(new Date).getTime()}})},3414:(t,e,r)=>{var n=r(9005),i=r(8521);n(n.P+n.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},1598:(t,e,r)=>{"use strict";var n=r(9005),i=r(9366),o=r(7408);n(n.P+n.F*r(8052)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(t){var e=i(this),r=o(e);return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},4075:(t,e,r)=>{var n=r(2274)("toPrimitive"),i=Date.prototype;n in i||r(1874)(i,n,r(1723))},6114:(t,e,r)=>{var n=Date.prototype,i="Invalid Date",o=n.toString,a=n.getTime;new Date(NaN)+""!=i&&r(9344)(n,"toString",(function(){var t=a.call(this);return t==t?o.call(this):i}))},311:(t,e,r)=>{var n=r(9005);n(n.P,"Function",{bind:r(4132)})},986:(t,e,r)=>{"use strict";var n=r(7375),i=r(662),o=r(2274)("hasInstance"),a=Function.prototype;o in a||r(9048).f(a,o,{value:function(t){if("function"!=typeof this||!n(t))return!1;if(!n(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},8720:(t,e,r)=>{var n=r(9048).f,i=Function.prototype,o=/^\s*function ([^ (]*)/,a="name";a in i||r(1391)&&n(i,a,{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},8562:(t,e,r)=>{"use strict";var n=r(2480),i=r(3348),o="Map";t.exports=r(5787)(o,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=n.getEntry(i(this,o),t);return e&&e.v},set:function(t,e){return n.def(i(this,o),0===t?0:t,e)}},n,!0)},7944:(t,e,r)=>{var n=r(9005),i=r(6557),o=Math.sqrt,a=Math.acosh;n(n.S+n.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},1968:(t,e,r)=>{var n=r(9005),i=Math.asinh;n(n.S+n.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},4290:(t,e,r)=>{var n=r(9005),i=Math.atanh;n(n.S+n.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},7082:(t,e,r)=>{var n=r(9005),i=r(492);n(n.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},7454:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},4787:(t,e,r)=>{var n=r(9005),i=Math.exp;n(n.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},2033:(t,e,r)=>{var n=r(9005),i=r(1028);n(n.S+n.F*(i!=Math.expm1),"Math",{expm1:i})},2400:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{fround:r(3081)})},4523:(t,e,r)=>{var n=r(9005),i=Math.abs;n(n.S,"Math",{hypot:function(t,e){for(var r,n,o=0,a=0,u=arguments.length,s=0;a<u;)s<(r=i(arguments[a++]))?(o=o*(n=s/r)*n+1,s=r):o+=r>0?(n=r/s)*n:r;return s===1/0?1/0:s*Math.sqrt(o)}})},3199:(t,e,r)=>{var n=r(9005),i=Math.imul;n(n.S+n.F*r(8052)((function(){return-5!=i(4294967295,5)||2!=i.length})),"Math",{imul:function(t,e){var r=65535,n=+t,i=+e,o=r&n,a=r&i;return 0|o*a+((r&n>>>16)*a+o*(r&i>>>16)<<16>>>0)}})},7704:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},5660:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{log1p:r(6557)})},8600:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},4144:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{sign:r(492)})},7272:(t,e,r)=>{var n=r(9005),i=r(1028),o=Math.exp;n(n.S+n.F*r(8052)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},5838:(t,e,r)=>{var n=r(9005),i=r(1028),o=Math.exp;n(n.S,"Math",{tanh:function(t){var e=i(t=+t),r=i(-t);return e==1/0?1:r==1/0?-1:(e-r)/(o(t)+o(-t))}})},6362:(t,e,r)=>{var n=r(9005);n(n.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},4772:(t,e,r)=>{"use strict";var n=r(5457),i=r(3821),o=r(9805),a=r(3809),u=r(7408),s=r(8052),c=r(5033).f,f=r(1610).f,l=r(9048).f,p=r(9570).trim,h="Number",v=n.Number,d=v,g=v.prototype,y=o(r(3171)(g))==h,m="trim"in String.prototype,b=function(t){var e=u(t,!1);if("string"==typeof e&&e.length>2){var r,n,i,o=(e=m?e.trim():p(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:n=2,i=49;break;case 79:case 111:n=8,i=55;break;default:return+e}for(var a,s=e.slice(2),c=0,f=s.length;c<f;c++)if((a=s.charCodeAt(c))<48||a>i)return NaN;return parseInt(s,n)}}return+e};if(!v(" 0o1")||!v("0b1")||v("+0x1")){v=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof v&&(y?s((function(){g.valueOf.call(r)})):o(r)!=h)?a(new d(b(e)),r,v):b(e)};for(var x,w=r(1391)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;w.length>S;S++)i(d,x=w[S])&&!i(v,x)&&l(v,x,f(d,x));v.prototype=g,g.constructor=v,r(9344)(n,h,v)}},344:(t,e,r)=>{var n=r(9005);n(n.S,"Number",{EPSILON:Math.pow(2,-52)})},651:(t,e,r)=>{var n=r(9005),i=r(5457).isFinite;n(n.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},9613:(t,e,r)=>{var n=r(9005);n(n.S,"Number",{isInteger:r(8177)})},3329:(t,e,r)=>{var n=r(9005);n(n.S,"Number",{isNaN:function(t){return t!=t}})},751:(t,e,r)=>{var n=r(9005),i=r(8177),o=Math.abs;n(n.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},8960:(t,e,r)=>{var n=r(9005);n(n.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},253:(t,e,r)=>{var n=r(9005);n(n.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},7330:(t,e,r)=>{var n=r(9005),i=r(313);n(n.S+n.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},7343:(t,e,r)=>{var n=r(9005),i=r(3064);n(n.S+n.F*(Number.parseInt!=i),"Number",{parseInt:i})},8150:(t,e,r)=>{"use strict";var n=r(9005),i=r(8571),o=r(5894),a=r(1971),u=1..toFixed,s=Math.floor,c=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l="0",p=function(t,e){for(var r=-1,n=e;++r<6;)n+=t*c[r],c[r]=n%1e7,n=s(n/1e7)},h=function(t){for(var e=6,r=0;--e>=0;)r+=c[e],c[e]=s(r/t),r=r%t*1e7},v=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var r=String(c[t]);e=""===e?r:e+a.call(l,7-r.length)+r}return e},d=function(t,e,r){return 0===e?r:e%2==1?d(t,e-1,r*t):d(t*t,e/2,r)};n(n.P+n.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!r(8052)((function(){u.call({})}))),"Number",{toFixed:function(t){var e,r,n,u,s=o(this,f),c=i(t),g="",y=l;if(c<0||c>20)throw RangeError(f);if(s!=s)return"NaN";if(s<=-1e21||s>=1e21)return String(s);if(s<0&&(g="-",s=-s),s>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(s*d(2,69,1))-69)<0?s*d(2,-e,1):s/d(2,e,1),r*=4503599627370496,(e=52-e)>0){for(p(0,r),n=c;n>=7;)p(1e7,0),n-=7;for(p(d(10,n,1),0),n=e-1;n>=23;)h(1<<23),n-=23;h(1<<n),p(1,1),h(2),y=v()}else p(0,r),p(1<<-e,0),y=v()+a.call(l,c);return c>0?g+((u=y.length)<=c?"0."+a.call(l,c-u)+y:y.slice(0,u-c)+"."+y.slice(u-c)):g+y}})},2268:(t,e,r)=>{"use strict";var n=r(9005),i=r(8052),o=r(5894),a=1..toPrecision;n(n.P+n.F*(i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},3890:(t,e,r)=>{var n=r(9005);n(n.S+n.F,"Object",{assign:r(7103)})},9778:(t,e,r)=>{var n=r(9005);n(n.S,"Object",{create:r(3171)})},8966:(t,e,r)=>{var n=r(9005);n(n.S+n.F*!r(1391),"Object",{defineProperties:r(5046)})},9981:(t,e,r)=>{var n=r(9005);n(n.S+n.F*!r(1391),"Object",{defineProperty:r(9048).f})},4673:(t,e,r)=>{var n=r(7375),i=r(8765).onFreeze;r(347)("freeze",(function(t){return function(e){return t&&n(e)?t(i(e)):e}}))},3564:(t,e,r)=>{var n=r(8653),i=r(1610).f;r(347)("getOwnPropertyDescriptor",(function(){return function(t,e){return i(n(t),e)}}))},2701:(t,e,r)=>{r(347)("getOwnPropertyNames",(function(){return r(7065).f}))},5474:(t,e,r)=>{var n=r(9366),i=r(662);r(347)("getPrototypeOf",(function(){return function(t){return i(n(t))}}))},3992:(t,e,r)=>{var n=r(7375);r(347)("isExtensible",(function(t){return function(e){return!!n(e)&&(!t||t(e))}}))},91:(t,e,r)=>{var n=r(7375);r(347)("isFrozen",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},1792:(t,e,r)=>{var n=r(7375);r(347)("isSealed",(function(t){return function(e){return!n(e)||!!t&&t(e)}}))},6260:(t,e,r)=>{var n=r(9005);n(n.S,"Object",{is:r(4267)})},5550:(t,e,r)=>{var n=r(9366),i=r(7106);r(347)("keys",(function(){return function(t){return i(n(t))}}))},1078:(t,e,r)=>{var n=r(7375),i=r(8765).onFreeze;r(347)("preventExtensions",(function(t){return function(e){return t&&n(e)?t(i(e)):e}}))},3328:(t,e,r)=>{var n=r(7375),i=r(8765).onFreeze;r(347)("seal",(function(t){return function(e){return t&&n(e)?t(i(e)):e}}))},9342:(t,e,r)=>{var n=r(9005);n(n.S,"Object",{setPrototypeOf:r(2549).set})},3478:(t,e,r)=>{"use strict";var n=r(7022),i={};i[r(2274)("toStringTag")]="z",i+""!="[object z]"&&r(9344)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},3054:(t,e,r)=>{var n=r(9005),i=r(313);n(n.G+n.F*(parseFloat!=i),{parseFloat:i})},8866:(t,e,r)=>{var n=r(9005),i=r(3064);n(n.G+n.F*(parseInt!=i),{parseInt:i})},9965:(t,e,r)=>{"use strict";var n,i,o,a,u=r(409),s=r(5457),c=r(8267),f=r(7022),l=r(9005),p=r(7375),h=r(1376),v=r(9646),d=r(7463),g=r(1706),y=r(4756).set,m=r(9392)(),b=r(4621),x=r(302),w=r(8749),S=r(2832),_="Promise",E=s.TypeError,O=s.process,k=O&&O.versions,A=k&&k.v8||"",P=s.Promise,j="process"==f(O),F=function(){},L=i=b.f,M=!!function(){try{var t=P.resolve(1),e=(t.constructor={})[r(2274)("species")]=function(t){t(F,F)};return(j||"function"==typeof PromiseRejectionEvent)&&t.then(F)instanceof e&&0!==A.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),I=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},N=function(t,e){if(!t._n){t._n=!0;var r=t._c;m((function(){for(var n=t._v,i=1==t._s,o=0,a=function(e){var r,o,a,u=i?e.ok:e.fail,s=e.resolve,c=e.reject,f=e.domain;try{u?(i||(2==t._h&&C(t),t._h=1),!0===u?r=n:(f&&f.enter(),r=u(n),f&&(f.exit(),a=!0)),r===e.promise?c(E("Promise-chain cycle")):(o=I(r))?o.call(r,s,c):s(r)):c(n)}catch(t){f&&!a&&f.exit(),c(t)}};r.length>o;)a(r[o++]);t._c=[],t._n=!1,e&&!t._h&&T(t)}))}},T=function(t){y.call(s,(function(){var e,r,n,i=t._v,o=R(t);if(o&&(e=x((function(){j?O.emit("unhandledRejection",i,t):(r=s.onunhandledrejection)?r({promise:t,reason:i}):(n=s.console)&&n.error&&n.error("Unhandled promise rejection",i)})),t._h=j||R(t)?2:1),t._a=void 0,o&&e.e)throw e.v}))},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},C=function(t){y.call(s,(function(){var e;j?O.emit("rejectionHandled",t):(e=s.onrejectionhandled)&&e({promise:t,reason:t._v})}))},D=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),N(e,!0))},U=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw E("Promise can't be resolved itself");(e=I(t))?m((function(){var n={_w:r,_d:!1};try{e.call(t,c(U,n,1),c(D,n,1))}catch(t){D.call(n,t)}})):(r._v=t,r._s=1,N(r,!1))}catch(t){D.call({_w:r,_d:!1},t)}}};M||(P=function(t){v(this,P,_,"_h"),h(t),n.call(this);try{t(c(U,this,1),c(D,this,1))}catch(t){D.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(8076)(P.prototype,{then:function(t,e){var r=L(g(this,P));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=j?O.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&N(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n;this.promise=t,this.resolve=c(U,t,1),this.reject=c(D,t,1)},b.f=L=function(t){return t===P||t===a?new o(t):i(t)}),l(l.G+l.W+l.F*!M,{Promise:P}),r(6103)(P,_),r(1699)(_),a=r(9547).Promise,l(l.S+l.F*!M,_,{reject:function(t){var e=L(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(u||!M),_,{resolve:function(t){return S(u&&this===a?P:this,t)}}),l(l.S+l.F*!(M&&r(5399)((function(t){P.all(t).catch(F)}))),_,{all:function(t){var e=this,r=L(e),n=r.resolve,i=r.reject,o=x((function(){var r=[],o=0,a=1;d(t,!1,(function(t){var u=o++,s=!1;r.push(void 0),a++,e.resolve(t).then((function(t){s||(s=!0,r[u]=t,--a||n(r))}),i)})),--a||n(r)}));return o.e&&i(o.v),r.promise},race:function(t){var e=this,r=L(e),n=r.reject,i=x((function(){d(t,!1,(function(t){e.resolve(t).then(r.resolve,n)}))}));return i.e&&n(i.v),r.promise}})},532:(t,e,r)=>{var n=r(9005),i=r(1376),o=r(9944),a=(r(5457).Reflect||{}).apply,u=Function.apply;n(n.S+n.F*!r(8052)((function(){a((function(){}))})),"Reflect",{apply:function(t,e,r){var n=i(t),s=o(r);return a?a(n,e,s):u.call(n,e,s)}})},7495:(t,e,r)=>{var n=r(9005),i=r(3171),o=r(1376),a=r(9944),u=r(7375),s=r(8052),c=r(4132),f=(r(5457).Reflect||{}).construct,l=s((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),p=!s((function(){f((function(){}))}));n(n.S+n.F*(l||p),"Reflect",{construct:function(t,e){o(t),a(e);var r=arguments.length<3?t:o(arguments[2]);if(p&&!l)return f(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return n.push.apply(n,e),new(c.apply(t,n))}var s=r.prototype,h=i(u(s)?s:Object.prototype),v=Function.apply.call(t,h,e);return u(v)?v:h}})},3813:(t,e,r)=>{var n=r(9048),i=r(9005),o=r(9944),a=r(7408);i(i.S+i.F*r(8052)((function(){Reflect.defineProperty(n.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(t,e,r){o(t),e=a(e,!0),o(r);try{return n.f(t,e,r),!0}catch(t){return!1}}})},1930:(t,e,r)=>{var n=r(9005),i=r(1610).f,o=r(9944);n(n.S,"Reflect",{deleteProperty:function(t,e){var r=i(o(t),e);return!(r&&!r.configurable)&&delete t[e]}})},8676:(t,e,r)=>{"use strict";var n=r(9005),i=r(9944),o=function(t){this._t=i(t),this._i=0;var e,r=this._k=[];for(e in t)r.push(e)};r(5242)(o,"Object",(function(){var t,e=this,r=e._k;do{if(e._i>=r.length)return{value:void 0,done:!0}}while(!((t=r[e._i++])in e._t));return{value:t,done:!1}})),n(n.S,"Reflect",{enumerate:function(t){return new o(t)}})},5124:(t,e,r)=>{var n=r(1610),i=r(9005),o=r(9944);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return n.f(o(t),e)}})},1621:(t,e,r)=>{var n=r(9005),i=r(662),o=r(9944);n(n.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},8701:(t,e,r)=>{var n=r(1610),i=r(662),o=r(3821),a=r(9005),u=r(7375),s=r(9944);a(a.S,"Reflect",{get:function t(e,r){var a,c,f=arguments.length<3?e:arguments[2];return s(e)===f?e[r]:(a=n.f(e,r))?o(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:u(c=i(e))?t(c,r,f):void 0}})},7755:(t,e,r)=>{var n=r(9005);n(n.S,"Reflect",{has:function(t,e){return e in t}})},5197:(t,e,r)=>{var n=r(9005),i=r(9944),o=Object.isExtensible;n(n.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},2:(t,e,r)=>{var n=r(9005);n(n.S,"Reflect",{ownKeys:r(553)})},8172:(t,e,r)=>{var n=r(9005),i=r(9944),o=Object.preventExtensions;n(n.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},2800:(t,e,r)=>{var n=r(9005),i=r(2549);i&&n(n.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},7301:(t,e,r)=>{var n=r(9048),i=r(1610),o=r(662),a=r(3821),u=r(9005),s=r(487),c=r(9944),f=r(7375);u(u.S,"Reflect",{set:function t(e,r,u){var l,p,h=arguments.length<4?e:arguments[3],v=i.f(c(e),r);if(!v){if(f(p=o(e)))return t(p,r,u,h);v=s(0)}if(a(v,"value")){if(!1===v.writable||!f(h))return!1;if(l=i.f(h,r)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,n.f(h,r,l)}else n.f(h,r,s(0,u));return!0}return void 0!==v.set&&(v.set.call(h,u),!0)}})},2822:(t,e,r)=>{var n=r(5457),i=r(3809),o=r(9048).f,a=r(5033).f,u=r(786),s=r(1576),c=n.RegExp,f=c,l=c.prototype,p=/a/g,h=/a/g,v=new c(p)!==p;if(r(1391)&&(!v||r(8052)((function(){return h[r(2274)("match")]=!1,c(p)!=p||c(h)==h||"/a/i"!=c(p,"i")})))){c=function(t,e){var r=this instanceof c,n=u(t),o=void 0===e;return!r&&n&&t.constructor===c&&o?t:i(v?new f(n&&!o?t.source:t,e):f((n=t instanceof c)?t.source:t,n&&o?s.call(t):e),r?this:l,c)};for(var d=function(t){t in c||o(c,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=a(f),y=0;g.length>y;)d(g[y++]);l.constructor=c,c.prototype=l,r(9344)(n,"RegExp",c)}r(1699)("RegExp")},4231:(t,e,r)=>{"use strict";var n=r(115);r(9005)({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},6726:(t,e,r)=>{r(1391)&&"g"!=/./g.flags&&r(9048).f(RegExp.prototype,"flags",{configurable:!0,get:r(1576)})},1274:(t,e,r)=>{"use strict";var n=r(9944),i=r(1995),o=r(8083),a=r(8371);r(5712)("match",1,(function(t,e,r,u){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=u(r,t,this);if(e.done)return e.value;var s=n(t),c=String(this);if(!s.global)return a(s,c);var f=s.unicode;s.lastIndex=0;for(var l,p=[],h=0;null!==(l=a(s,c));){var v=String(l[0]);p[h]=v,""===v&&(s.lastIndex=o(c,i(s.lastIndex),f)),h++}return 0===h?null:p}]}))},8406:(t,e,r)=>{"use strict";var n=r(9944),i=r(9366),o=r(1995),a=r(8571),u=r(8083),s=r(8371),c=Math.max,f=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;r(5712)("replace",2,(function(t,e,r,v){return[function(n,i){var o=t(this),a=null==n?void 0:n[e];return void 0!==a?a.call(n,o,i):r.call(String(o),n,i)},function(t,e){var i=v(r,t,this,e);if(i.done)return i.value;var l=n(t),p=String(this),h="function"==typeof e;h||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=s(l,p);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=u(p,o(l.lastIndex),y))}for(var x,w="",S=0,_=0;_<m.length;_++){b=m[_];for(var E=String(b[0]),O=c(f(a(b.index),p.length),0),k=[],A=1;A<b.length;A++)k.push(void 0===(x=b[A])?x:String(x));var P=b.groups;if(h){var j=[E].concat(k,O,p);void 0!==P&&j.push(P);var F=String(e.apply(void 0,j))}else F=d(E,p,O,k,P,e);O>=S&&(w+=p.slice(S,O)+F,S=O+E.length)}return w+p.slice(S)}];function d(t,e,n,o,a,u){var s=n+t.length,c=o.length,f=h;return void 0!==a&&(a=i(a),f=p),r.call(u,f,(function(r,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,n);case"'":return e.slice(s);case"<":u=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return r;if(f>c){var p=l(f/10);return 0===p?r:p<=c?void 0===o[p-1]?i.charAt(1):o[p-1]+i.charAt(1):r}u=o[f-1]}return void 0===u?"":u}))}}))},2983:(t,e,r)=>{"use strict";var n=r(9944),i=r(4267),o=r(8371);r(5712)("search",1,(function(t,e,r,a){return[function(r){var n=t(this),i=null==r?void 0:r[e];return void 0!==i?i.call(r,n):new RegExp(r)[e](String(n))},function(t){var e=a(r,t,this);if(e.done)return e.value;var u=n(t),s=String(this),c=u.lastIndex;i(c,0)||(u.lastIndex=0);var f=o(u,s);return i(u.lastIndex,c)||(u.lastIndex=c),null===f?-1:f.index}]}))},9311:(t,e,r)=>{"use strict";var n=r(786),i=r(9944),o=r(1706),a=r(8083),u=r(1995),s=r(8371),c=r(115),f=r(8052),l=Math.min,p=[].push,h=4294967295,v=!f((function(){RegExp(h,"y")}));r(5712)("split",2,(function(t,e,r,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!n(t))return r.call(i,t,e);for(var o,a,u,s=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,v=void 0===e?h:e>>>0,d=new RegExp(t.source,f+"g");(o=c.call(d,i))&&!((a=d.lastIndex)>l&&(s.push(i.slice(l,o.index)),o.length>1&&o.index<i.length&&p.apply(s,o.slice(1)),u=o[0].length,l=a,s.length>=v));)d.lastIndex===o.index&&d.lastIndex++;return l===i.length?!u&&d.test("")||s.push(""):s.push(i.slice(l)),s.length>v?s.slice(0,v):s}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:r.call(this,t,e)}:r,[function(r,n){var i=t(this),o=null==r?void 0:r[e];return void 0!==o?o.call(r,i,n):d.call(String(i),r,n)},function(t,e){var n=f(d,t,this,e,d!==r);if(n.done)return n.value;var c=i(t),p=String(this),g=o(c,RegExp),y=c.unicode,m=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(v?"y":"g"),b=new g(v?c:"^(?:"+c.source+")",m),x=void 0===e?h:e>>>0;if(0===x)return[];if(0===p.length)return null===s(b,p)?[p]:[];for(var w=0,S=0,_=[];S<p.length;){b.lastIndex=v?S:0;var E,O=s(b,v?p:p.slice(S));if(null===O||(E=l(u(b.lastIndex+(v?0:S)),p.length))===w)S=a(p,S,y);else{if(_.push(p.slice(w,S)),_.length===x)return _;for(var k=1;k<=O.length-1;k++)if(_.push(O[k]),_.length===x)return _;S=w=E}}return _.push(p.slice(w)),_}]}))},3850:(t,e,r)=>{"use strict";r(6726);var n=r(9944),i=r(1576),o=r(1391),a="toString",u=/./.toString,s=function(t){r(9344)(RegExp.prototype,a,t,!0)};r(8052)((function(){return"/a/b"!=u.call({source:"a",flags:"b"})}))?s((function(){var t=n(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)})):u.name!=a&&s((function(){return u.call(this)}))},3663:(t,e,r)=>{"use strict";var n=r(2480),i=r(3348);t.exports=r(5787)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(i(this,"Set"),t=0===t?0:t,t)}},n)},7973:(t,e,r)=>{"use strict";r(3645)("anchor",(function(t){return function(e){return t(this,"a","name",e)}}))},255:(t,e,r)=>{"use strict";r(3645)("big",(function(t){return function(){return t(this,"big","","")}}))},7609:(t,e,r)=>{"use strict";r(3645)("blink",(function(t){return function(){return t(this,"blink","","")}}))},8760:(t,e,r)=>{"use strict";r(3645)("bold",(function(t){return function(){return t(this,"b","","")}}))},4078:(t,e,r)=>{"use strict";var n=r(9005),i=r(8918)(!1);n(n.P,"String",{codePointAt:function(t){return i(this,t)}})},4152:(t,e,r)=>{"use strict";var n=r(9005),i=r(1995),o=r(4221),a="endsWith",u="".endsWith;n(n.P+n.F*r(4088)(a),"String",{endsWith:function(t){var e=o(this,t,a),r=arguments.length>1?arguments[1]:void 0,n=i(e.length),s=void 0===r?n:Math.min(i(r),n),c=String(t);return u?u.call(e,c,s):e.slice(s-c.length,s)===c}})},735:(t,e,r)=>{"use strict";r(3645)("fixed",(function(t){return function(){return t(this,"tt","","")}}))},4408:(t,e,r)=>{"use strict";r(3645)("fontcolor",(function(t){return function(e){return t(this,"font","color",e)}}))},3211:(t,e,r)=>{"use strict";r(3645)("fontsize",(function(t){return function(e){return t(this,"font","size",e)}}))},4347:(t,e,r)=>{var n=r(9005),i=r(7212),o=String.fromCharCode,a=String.fromCodePoint;n(n.S+n.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,a=0;n>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");r.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return r.join("")}})},3401:(t,e,r)=>{"use strict";var n=r(9005),i=r(4221),o="includes";n(n.P+n.F*r(4088)(o),"String",{includes:function(t){return!!~i(this,t,o).indexOf(t,arguments.length>1?arguments[1]:void 0)}})},7715:(t,e,r)=>{"use strict";r(3645)("italics",(function(t){return function(){return t(this,"i","","")}}))},8541:(t,e,r)=>{"use strict";var n=r(8918)(!0);r(748)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})}))},181:(t,e,r)=>{"use strict";r(3645)("link",(function(t){return function(e){return t(this,"a","href",e)}}))},7794:(t,e,r)=>{var n=r(9005),i=r(8653),o=r(1995);n(n.S,"String",{raw:function(t){for(var e=i(t.raw),r=o(e.length),n=arguments.length,a=[],u=0;r>u;)a.push(String(e[u++])),u<n&&a.push(String(arguments[u]));return a.join("")}})},2041:(t,e,r)=>{var n=r(9005);n(n.P,"String",{repeat:r(1971)})},9907:(t,e,r)=>{"use strict";r(3645)("small",(function(t){return function(){return t(this,"small","","")}}))},3523:(t,e,r)=>{"use strict";var n=r(9005),i=r(1995),o=r(4221),a="startsWith",u="".startsWith;n(n.P+n.F*r(4088)(a),"String",{startsWith:function(t){var e=o(this,t,a),r=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),n=String(t);return u?u.call(e,n,r):e.slice(r,r+n.length)===n}})},8092:(t,e,r)=>{"use strict";r(3645)("strike",(function(t){return function(){return t(this,"strike","","")}}))},6769:(t,e,r)=>{"use strict";r(3645)("sub",(function(t){return function(){return t(this,"sub","","")}}))},2901:(t,e,r)=>{"use strict";r(3645)("sup",(function(t){return function(){return t(this,"sup","","")}}))},7221:(t,e,r)=>{"use strict";r(9570)("trim",(function(t){return function(){return t(this,3)}}))},2154:(t,e,r)=>{"use strict";var n=r(5457),i=r(3821),o=r(1391),a=r(9005),u=r(9344),s=r(8765).KEY,c=r(8052),f=r(1629),l=r(6103),p=r(4197),h=r(2274),v=r(4692),d=r(1873),g=r(7874),y=r(8846),m=r(9944),b=r(7375),x=r(9366),w=r(8653),S=r(7408),_=r(487),E=r(3171),O=r(7065),k=r(1610),A=r(1587),P=r(9048),j=r(7106),F=k.f,L=P.f,M=O.f,I=n.Symbol,N=n.JSON,T=N&&N.stringify,R=h("_hidden"),C=h("toPrimitive"),D={}.propertyIsEnumerable,U=f("symbol-registry"),B=f("symbols"),q=f("op-symbols"),V=Object.prototype,W="function"==typeof I&&!!A.f,G=n.QObject,z=!G||!G.prototype||!G.prototype.findChild,H=o&&c((function(){return 7!=E(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=F(V,e);n&&delete V[e],L(t,e,r),n&&t!==V&&L(V,e,n)}:L,J=function(t){var e=B[t]=E(I.prototype);return e._k=t,e},$=W&&"symbol"==typeof I.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof I},X=function(t,e,r){return t===V&&X(q,e,r),m(t),e=S(e,!0),m(r),i(B,e)?(r.enumerable?(i(t,R)&&t[R][e]&&(t[R][e]=!1),r=E(r,{enumerable:_(0,!1)})):(i(t,R)||L(t,R,_(1,{})),t[R][e]=!0),H(t,e,r)):L(t,e,r)},Y=function(t,e){m(t);for(var r,n=g(e=w(e)),i=0,o=n.length;o>i;)X(t,r=n[i++],e[r]);return t},K=function(t){var e=D.call(this,t=S(t,!0));return!(this===V&&i(B,t)&&!i(q,t))&&(!(e||!i(this,t)||!i(B,t)||i(this,R)&&this[R][t])||e)},Z=function(t,e){if(t=w(t),e=S(e,!0),t!==V||!i(B,e)||i(q,e)){var r=F(t,e);return!r||!i(B,e)||i(t,R)&&t[R][e]||(r.enumerable=!0),r}},Q=function(t){for(var e,r=M(w(t)),n=[],o=0;r.length>o;)i(B,e=r[o++])||e==R||e==s||n.push(e);return n},tt=function(t){for(var e,r=t===V,n=M(r?q:w(t)),o=[],a=0;n.length>a;)!i(B,e=n[a++])||r&&!i(V,e)||o.push(B[e]);return o};W||(u((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(r){this===V&&e.call(q,r),i(this,R)&&i(this[R],t)&&(this[R][t]=!1),H(this,t,_(1,r))};return o&&z&&H(V,t,{configurable:!0,set:e}),J(t)}).prototype,"toString",(function(){return this._k})),k.f=Z,P.f=X,r(5033).f=O.f=Q,r(4648).f=K,A.f=tt,o&&!r(409)&&u(V,"propertyIsEnumerable",K,!0),v.f=function(t){return J(h(t))}),a(a.G+a.W+a.F*!W,{Symbol:I});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),rt=0;et.length>rt;)h(et[rt++]);for(var nt=j(h.store),it=0;nt.length>it;)d(nt[it++]);a(a.S+a.F*!W,"Symbol",{for:function(t){return i(U,t+="")?U[t]:U[t]=I(t)},keyFor:function(t){if(!$(t))throw TypeError(t+" is not a symbol!");for(var e in U)if(U[e]===t)return e},useSetter:function(){z=!0},useSimple:function(){z=!1}}),a(a.S+a.F*!W,"Object",{create:function(t,e){return void 0===e?E(t):Y(E(t),e)},defineProperty:X,defineProperties:Y,getOwnPropertyDescriptor:Z,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var ot=c((function(){A.f(1)}));a(a.S+a.F*ot,"Object",{getOwnPropertySymbols:function(t){return A.f(x(t))}}),N&&a(a.S+a.F*(!W||c((function(){var t=I();return"[null]"!=T([t])||"{}"!=T({a:t})||"{}"!=T(Object(t))}))),"JSON",{stringify:function(t){for(var e,r,n=[t],i=1;arguments.length>i;)n.push(arguments[i++]);if(r=e=n[1],(b(e)||void 0!==t)&&!$(t))return y(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!$(e))return e}),n[1]=e,T.apply(N,n)}}),I.prototype[C]||r(1874)(I.prototype,C,I.prototype.valueOf),l(I,"Symbol"),l(Math,"Math",!0),l(n.JSON,"JSON",!0)},76:(t,e,r)=>{"use strict";var n=r(9005),i=r(6229),o=r(9130),a=r(9944),u=r(7212),s=r(1995),c=r(7375),f=r(5457).ArrayBuffer,l=r(1706),p=o.ArrayBuffer,h=o.DataView,v=i.ABV&&f.isView,d=p.prototype.slice,g=i.VIEW,y="ArrayBuffer";n(n.G+n.W+n.F*(f!==p),{ArrayBuffer:p}),n(n.S+n.F*!i.CONSTR,y,{isView:function(t){return v&&v(t)||c(t)&&g in t}}),n(n.P+n.U+n.F*r(8052)((function(){return!new p(2).slice(1,void 0).byteLength})),y,{slice:function(t,e){if(void 0!==d&&void 0===e)return d.call(a(this),t);for(var r=a(this).byteLength,n=u(t,r),i=u(void 0===e?r:e,r),o=new(l(this,p))(s(i-n)),c=new h(this),f=new h(o),v=0;n<i;)f.setUint8(v++,c.getUint8(n++));return o}}),r(1699)(y)},3655:(t,e,r)=>{var n=r(9005);n(n.G+n.W+n.F*!r(6229).ABV,{DataView:r(9130).DataView})},6338:(t,e,r)=>{r(3513)("Float32",4,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},9632:(t,e,r)=>{r(3513)("Float64",8,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},2126:(t,e,r)=>{r(3513)("Int16",2,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},3757:(t,e,r)=>{r(3513)("Int32",4,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},25:(t,e,r)=>{r(3513)("Int8",1,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},6335:(t,e,r)=>{r(3513)("Uint16",2,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},1676:(t,e,r)=>{r(3513)("Uint32",4,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},6757:(t,e,r)=>{r(3513)("Uint8",1,(function(t){return function(e,r,n){return t(this,e,r,n)}}))},2173:(t,e,r)=>{r(3513)("Uint8",1,(function(t){return function(e,r,n){return t(this,e,r,n)}}),!0)},2579:(t,e,r)=>{"use strict";var n,i=r(5457),o=r(8098)(0),a=r(9344),u=r(8765),s=r(7103),c=r(2238),f=r(7375),l=r(3348),p=r(3348),h=!i.ActiveXObject&&"ActiveXObject"in i,v="WeakMap",d=u.getWeak,g=Object.isExtensible,y=c.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(t){if(f(t)){var e=d(t);return!0===e?y(l(this,v)).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,v),t,e)}},x=t.exports=r(5787)(v,m,b,c,!0,!0);p&&h&&(s((n=c.getConstructor(m,v)).prototype,b),u.NEED=!0,o(["delete","has","get","set"],(function(t){var e=x.prototype,r=e[t];a(e,t,(function(e,i){if(f(e)&&!g(e)){this._f||(this._f=new n);var o=this._f[t](e,i);return"set"==t?this:o}return r.call(this,e,i)}))})))},3972:(t,e,r)=>{"use strict";var n=r(2238),i=r(3348),o="WeakSet";r(5787)(o,(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return n.def(i(this,o),t,!0)}},n,!1,!0)},2328:(t,e,r)=>{"use strict";var n=r(9005),i=r(7597),o=r(9366),a=r(1995),u=r(1376),s=r(412);n(n.P,"Array",{flatMap:function(t){var e,r,n=o(this);return u(t),e=a(n.length),r=s(n,0),i(r,n,n,e,0,1,t,arguments[1]),r}}),r(1343)("flatMap")},2323:(t,e,r)=>{"use strict";var n=r(9005),i=r(6408)(!0);n(n.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(1343)("includes")},1746:(t,e,r)=>{var n=r(9005),i=r(9776)(!0);n(n.S,"Object",{entries:function(t){return i(t)}})},5075:(t,e,r)=>{var n=r(9005),i=r(553),o=r(8653),a=r(1610),u=r(7862);n(n.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,r,n=o(t),s=a.f,c=i(n),f={},l=0;c.length>l;)void 0!==(r=s(n,e=c[l++]))&&u(f,e,r);return f}})},3119:(t,e,r)=>{var n=r(9005),i=r(9776)(!1);n(n.S,"Object",{values:function(t){return i(t)}})},4219:(t,e,r)=>{"use strict";var n=r(9005),i=r(9547),o=r(5457),a=r(1706),u=r(2832);n(n.P+n.R,"Promise",{finally:function(t){var e=a(this,i.Promise||o.Promise),r="function"==typeof t;return this.then(r?function(r){return u(e,t()).then((function(){return r}))}:t,r?function(r){return u(e,t()).then((function(){throw r}))}:t)}})},1513:(t,e,r)=>{"use strict";var n=r(9005),i=r(3364),o=r(8749),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);n(n.P+n.F*a,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},8448:(t,e,r)=>{"use strict";var n=r(9005),i=r(3364),o=r(8749),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);n(n.P+n.F*a,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},9274:(t,e,r)=>{"use strict";r(9570)("trimLeft",(function(t){return function(){return t(this,1)}}),"trimStart")},5270:(t,e,r)=>{"use strict";r(9570)("trimRight",(function(t){return function(){return t(this,2)}}),"trimEnd")},6692:(t,e,r)=>{r(1873)("asyncIterator")},6154:(t,e,r)=>{for(var n=r(1197),i=r(7106),o=r(9344),a=r(5457),u=r(1874),s=r(5616),c=r(2274),f=c("iterator"),l=c("toStringTag"),p=s.Array,h={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(h),d=0;d<v.length;d++){var g,y=v[d],m=h[y],b=a[y],x=b&&b.prototype;if(x&&(x[f]||u(x,f,p),x[l]||u(x,l,y),s[y]=p,m))for(g in n)x[g]||o(x,g,n[g],!0)}},7194:(t,e,r)=>{var n=r(9005),i=r(4756);n(n.G+n.B,{setImmediate:i.set,clearImmediate:i.clear})},1562:(t,e,r)=>{var n=r(5457),i=r(9005),o=r(8749),a=[].slice,u=/MSIE .\./.test(o),s=function(t){return function(e,r){var n=arguments.length>2,i=!!n&&a.call(arguments,2);return t(n?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,r)}};i(i.G+i.B+i.F*u,{setTimeout:s(n.setTimeout),setInterval:s(n.setInterval)})},2100:(t,e,r)=>{r(1562),r(7194),r(6154),t.exports=r(9547)},2390:t=>{var e=function(t){"use strict";var e,r=Object.prototype,n=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function c(t,e,r,n){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),a=new P(n||[]);return o._invoke=function(t,e,r){var n=l;return function(i,o){if(n===h)throw new Error("Generator is already running");if(n===v){if("throw"===i)throw o;return F()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var u=O(a,r);if(u){if(u===d)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=v,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=h;var s=f(t,e,r);if("normal"===s.type){if(n=r.done?v:p,s.arg===d)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=v,r.method="throw",r.arg=s.arg)}}}(t,r,a),o}function f(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l="suspendedStart",p="suspendedYield",h="executing",v="completed",d={};function g(){}function y(){}function m(){}var b={};s(b,o,(function(){return this}));var x=Object.getPrototypeOf,w=x&&x(x(j([])));w&&w!==r&&n.call(w,o)&&(b=w);var S=m.prototype=g.prototype=Object.create(b);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function E(t,e){function r(i,o,a,u){var s=f(t[i],t,o);if("throw"!==s.type){var c=s.arg,l=c.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,u)}),(function(t){r("throw",t,a,u)})):e.resolve(l).then((function(t){c.value=t,a(c)}),(function(t){return r("throw",t,a,u)}))}u(s.arg)}var i;this._invoke=function(t,n){function o(){return new e((function(e,i){r(t,n,e,i)}))}return i=i?i.then(o,o):o()}}function O(t,r){var n=t.iterator[r.method];if(n===e){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=e,O(t,r),"throw"===r.method))return d;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=f(n,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,d;var o=i.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,d):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,d)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function A(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function j(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function r(){for(;++i<t.length;)if(n.call(t,i))return r.value=t[i],r.done=!1,r;return r.value=e,r.done=!0,r};return a.next=a}}return{next:F}}function F(){return{value:e,done:!0}}return y.prototype=m,s(S,"constructor",m),s(m,"constructor",y),y.displayName=s(m,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,s(t,u,"GeneratorFunction")),t.prototype=Object.create(S),t},t.awrap=function(t){return{__await:t}},_(E.prototype),s(E.prototype,a,(function(){return this})),t.AsyncIterator=E,t.async=function(e,r,n,i,o){void 0===o&&(o=Promise);var a=new E(c(e,r,n,i),o);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(S),s(S,u,"Generator"),s(S,o,(function(){return this})),s(S,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=j,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(A),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function i(n,i){return u.type="throw",u.arg=t,r.next=n,i&&(r.method="next",r.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),c=n.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),A(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;A(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:j(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},899:t=>{var e="undefined"!=typeof process&&process.pid?process.pid.toString(36):"";function r(){var t=Date.now(),e=r.last||t;return r.last=t>e?t:e+1}t.exports=t.exports.default=function(t,n){return(t||"")+""+e+r().toString(36)+(n||"")},t.exports.process=function(t,n){return(t||"")+e+r().toString(36)+(n||"")},t.exports.time=function(t,e){return(t||"")+r().toString(36)+(e||"")}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(2868),e=r.n(t);function n(t,e,r,n,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,i)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}r(6146);var o=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.query=e}var r,o,a,u;return r=t,(o=[{key:"doSearch",value:(a=regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,e()("https://forkify-api.herokuapp.com/api/search?q="+this.query);case 3:return r=t.sent,this.result=r.data.recipes,t.abrupt("return",this.result);case 8:t.prev=8,t.t0=t.catch(0),alert("Асуудал гарлаа: "+t.t0);case 11:case"end":return t.stop()}}),t,this,[[0,8]])})),u=function(){var t=this,e=arguments;return new Promise((function(r,i){var o=a.apply(t,e);function u(t){n(o,r,i,u,s,"next",t)}function s(t){n(o,r,i,u,s,"throw",t)}u(void 0)}))},function(){return u.apply(this,arguments)})}])&&i(r.prototype,o),t}(),a={searchForm:document.querySelector(".search"),searchInput:document.querySelector(".search__field"),searchResultList:document.querySelector(".results__list"),searchResultDiv:document.querySelector(".results"),pageButtons:document.querySelector(".results__pages"),recipeDiv:document.querySelector(".recipe"),shoppingList:document.querySelector(".shopping__list"),likeButton:document.querySelector(".recipe__love"),likesMenu:document.querySelector(".likes__field"),likesList:document.querySelector(".likes__list")},u="loader",s=function(t){var e='\n    <div class="'.concat(u,'">\n        <svg>\n            <use href="img/icons.svg#icon-cw"></use>\n        </svg>\n    </div>');t.insertAdjacentHTML("afterbegin",e)},c=function(){var t=document.querySelector(".".concat(u));t&&t.parentElement.removeChild(t)},f=function(t){var e='\n  <li>\n                    <a class="results__link" href="#'.concat(t.recipe_id,'">\n                        <figure class="results__fig">\n                            <img src="').concat(t.image_url,'" alt="Test">\n                        </figure>\n                        <div class="results__data">\n                            <h4 class="results__name">').concat(t.title,'</h4>\n                            <p class="results__author">').concat(t.publisher,"</p>\n                        </div>\n                    </a>\n                </li>");a.searchResultList.insertAdjacentHTML("beforeend",e)},l=function(){a.searchResultList.innerHTML="",a.pageButtons.innerHTML=""},p=function(t,e,r){return'\n<button class="btn-inline results__btn--'.concat(e,'" data-goto="').concat(t,'">\n<svg class="search__icon">\n    <use href="img/icons.svg#icon-triangle-').concat(r,'"></use>\n</svg>\n<span>Хуудас ').concat(t,"</span>\n</button>")},h=function(t,e){var r;1==e||(1==t&&e>1?r=p(t+1,"next","right"):t==e?r=p(t-1,"prev","left"):(r=p(t-1,"prev","left"),r+=p(t+1,"next","right"))),a.pageButtons.insertAdjacentHTML("afterbegin",r)},v=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:12,n=(e-1)*r,i=e*r;t.slice(n,i).forEach(f);var o=Math.ceil(t.length/r);h(e,o)};function d(t,e,r,n,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,i)}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var y=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=e}var r,n,i,o;return r=t,(n=[{key:"getRecipe",value:(i=regeneratorRuntime.mark((function t(){var r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e()("https://forkify-api.herokuapp.com/api/get?rId="+this.id);case 2:r=t.sent,this.publisher=r.data.recipe.publisher,this.ingredients=r.data.recipe.ingredients,this.source_url=r.data.recipe.source_url,this.image_url=r.data.recipe.image_url,this.publisher_url=r.data.recipe.publisher_url,this.title=r.data.recipe.title;case 9:case"end":return t.stop()}}),t,this)})),o=function(){var t=this,e=arguments;return new Promise((function(r,n){var o=i.apply(t,e);function a(t){d(o,r,n,a,u,"next",t)}function u(t){d(o,r,n,a,u,"throw",t)}a(void 0)}))},function(){return o.apply(this,arguments)})}])&&g(r.prototype,n),t}(),m=r(899),b=r.n(m);function x(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var w=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.items=[]}var e,r;return e=t,(r=[{key:"addItem",value:function(t){var e={id:b()(),item:t};return this.items.push(e),e}},{key:"deleteItem",value:function(t){var e=this.items.findIndex((function(e){return e.id===t}));this.items.splice(e,1)}}])&&x(e.prototype,r),t}(),S=function(t){Array.from(document.querySelectorAll(".results__link")).forEach((function(t){return t.classList.remove("results__link--active")}));var e=document.querySelector('.results__link[href*="#'.concat(t,'"]'));e&&e.classList.add("results__link--active")};function _(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var E=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.readLocalStorage(),this.likes||(this.likes=[])}var e,r;return e=t,(r=[{key:"addLike",value:function(t,e,r,n){var i={id:t,title:e,publisher:r,img:n};return this.likes.push(i),this.saveDataToLocalStorage(),i}},{key:"deleteLike",value:function(t){var e=this.likes.findIndex((function(e){return e.id=t}));this.likes.splice(e,1),this.saveDataToLocalStorage()}},{key:"isLiked",value:function(t){return-1!==this.likes.findIndex((function(e){return e.id==t}))}},{key:"getNumberOfLikes",value:function(){return this.likes.length}},{key:"saveDataToLocalStorage",value:function(){localStorage.setItem("likes",JSON.stringify(this.likes))}},{key:"readLocalStorage",value:function(){this.likes=JSON.parse(localStorage.getItem("likes"))}}])&&_(e.prototype,r),t}(),O=function(t){var e=t?"icon-heart":"icon-heart-outlined";document.querySelector(".recipe__love use").setAttribute("href","img/icons.svg#".concat(e))},k=function(t){a.likesMenu.style.visibility=t>0?"visible":"hidden"},A=function(t){var e='<li>\n  <a class="likes__link" href="#'.concat(t.id,'">\n      <figure class="likes__fig">\n          <img src="').concat(t.img,'" alt="Test">\n      </figure>\n      <div class="likes__data">\n          <h4 class="likes__name">').concat(t.title,'</h4>\n          <p class="likes__author">').concat(t.publisher,"</p>\n      </div>\n  </a>\n</li>");a.likesList.insertAdjacentHTML("beforeend",e)};function P(t,e,r,n,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void r(t)}u.done?e(s):Promise.resolve(s).then(n,i)}function j(t){return function(){var e=this,r=arguments;return new Promise((function(n,i){var o=t.apply(e,r);function a(t){P(o,n,i,a,u,"next",t)}function u(t){P(o,n,i,a,u,"throw",t)}a(void 0)}))}}var F={};["carrot","broccoli","asparagus","cauliflower","corn","cucumber","green pepper","lettuce","mushrooms","onion","potato","pumpkin","red pepper","tomato","beetroot","brussel sprouts","peas","zucchini","radish","sweet potato","artichoke","leek","cabbage","celery","chili","garlic","basil","coriander","parsley","dill","rosemary","oregano","cinnamon","saffron","green bean","bean","chickpea","lentil","apple","apricot","avocado","banana","blackberry","blackcurrant","blueberry","boysenberry","cherry","coconut","fig","grape","grapefruit","kiwifruit","lemon","lime","lychee","mandarin","mango","melon","nectarine","orange","papaya","passion fruit","peach","pear","pineapple","plum","pomegranate","quince","raspberry","strawberry","watermelon","salad","pizza","pasta","popcorn","lobster","steak","bbq","pudding","hamburger","pie","cake","sausage","tacos","kebab","poutine","seafood","chips","fries","masala","paella","som tam","chicken","toast","marzipan","tofu","ketchup","hummus","chili","maple syrup","parma ham","fajitas","champ","lasagna","poke","chocolate","croissant","arepas","bunny chow","pierogi","donuts","rendang","sushi","ice cream","duck","curry","beef","goat","lamb","turkey","pork","fish","crab","bacon","ham","pepperoni","salami","ribs"].forEach((function(t){var e;e=t.includes(" ")?t.replace(" ","-"):t,document.querySelector(".foodMenu").insertAdjacentHTML("beforeend",'<button class="btn-small food-menu-button" id='.concat(e,">").concat(t,"</button>"))}));var L=function(){var t=j(regeneratorRuntime.mark((function t(e){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!e){t.next=9;break}return F.search=new o(e),a.searchInput.value="",l(),s(a.searchResultDiv),t.next=7,F.search.doSearch();case 7:c(),null==F.search.result?(a.searchInput.value="",a.searchInput.placeholder="Хайлт илэрцгүй."):v(F.search.result);case 9:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}();a.searchForm.addEventListener("submit",(function(t){t.preventDefault();var e=a.searchInput.value;L(e)})),document.querySelector(".foodMenu").addEventListener("click",(function(t){t.preventDefault();var e=t.target.closest(".food-menu-button").id;e.includes("-")&&(e=e.replace("-"," ")),L(e)})),a.pageButtons.addEventListener("click",(function(t){var e=t.target.closest(".btn-inline");if(e){var r=parseInt(e.dataset.goto);l(),v(F.search.result,r)}}));var M=function(){var t=j(regeneratorRuntime.mark((function t(){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(e=window.location.hash.replace("#",""))){t.next=10;break}return F.recipe=new y(e),a.recipeDiv.innerHTML="",s(a.recipeDiv),S(e),t.next=8,F.recipe.getRecipe();case 8:c(),r=F.recipe,n=F.likes.isLiked(e),void 0,i='\n  <figure class="recipe__fig">\n                <img src="'.concat(r.image_url,'" alt="').concat(r.title,'" class="recipe__img">\n                <h1 class="recipe__title">\n                    <span>').concat(r.title,'</span>\n                </h1>\n            </figure>\n            <div class="recipe__details">\n                \n                <button class="recipe__love">\n                    <svg class="header__likes">\n                        <use href="img/icons.svg#icon-heart').concat(n?"":"-outlined",'"></use>\n                    </svg>\n                </button>\n            </div>\n\n            <div class="recipe__ingredients">\n                <ul class="recipe__ingredient-list">\n                    ').concat(r.ingredients.map((function(t){return'<li class="recipe__item">\n        <svg class="recipe__icon">\n            <use href="img/icons.svg#icon-check"></use>\n        </svg>\n        <div class="recipe__ingredient">\n            '.concat(t,"\n        </div>\n    </li>\n")})).join(" "),'\n                </ul>\n                <button class="btn-small recipe__btn">\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-shopping-cart"></use>\n                    </svg>\n                    <span>САГСАНД ХИЙХ</span>\n                </button>\n            </div>\n\n            <div class="recipe__directions">\n                <h2 class="heading-2">Хэрхэн бэлтгэх вэ</h2>\n                <p class="recipe__directions-text">\n                    Жорыг бэлтгэж оруулсан\n                    <span class="recipe__by">').concat(r.publisher,'</span>. Манай вэб сайтаас жорын зааврыг авна уу\n                </p>\n                <a class="btn-small recipe__btn" href="').concat(r.source_url,'" target="_blank">\n                    <span>ЗААВАР ҮЗЭХ</span>\n                    <svg class="search__icon">\n                        <use href="img/icons.svg#icon-triangle-right"></use>\n                    </svg>\n                </a>\n            </div>\n  '),a.recipeDiv.insertAdjacentHTML("afterbegin",i);case 10:case"end":return t.stop()}var r,n,i}),t)})));return function(){return t.apply(this,arguments)}}();["hashchange","load"].forEach((function(t){return window.addEventListener(t,M)})),window.addEventListener("load",(function(){F.likes||(F.likes=new E),k(F.likes.getNumberOfLikes()),F.likes.likes.forEach((function(t){A(t)}))}));a.recipeDiv.addEventListener("click",(function(t){t.target.matches(".recipe__btn, .recipe__btn *")?(a.shoppingList.innerHTML="",F.list=new w,F.recipe.ingredients.forEach((function(t){var e,r;e=F.list.addItem(t),r='\n    <li class="shopping__item" data-itemid='.concat(e.id,'>\n      <p class="shopping__description">').concat(e.item,'</p>\n      <button class="shopping__delete btn-tiny">\n          <svg>\n              <use href="img/icons.svg#icon-circle-with-cross"></use>\n          </svg>\n      </button>\n    </li>'),a.shoppingList.insertAdjacentHTML("beforeend",r)}))):t.target.matches(".recipe__love, .recipe__love *")&&function(){F.likes||(F.likes=new E);var t,e,r=F.recipe.id;if(F.likes.isLiked(r))F.likes.deleteLike(r),t=r,(e=document.querySelector('.likes__link[href*="'.concat(t,'"]')).parentElement)&&e.parentElement.removeChild(e),O(!1);else{var n=F.likes.addLike(r,F.recipe.title,F.recipe.publisher,F.recipe.image_url);A(n),O(!0)}k(F.likes.getNumberOfLikes())}()})),a.shoppingList.addEventListener("click",(function(t){var e=t.target.closest(".shopping__item").dataset.itemid;t.target.parentElement.parentElement.parentElement.dataset.itemid!=e&&t.target.parentElement.parentElement.dataset.itemid!=e||(F.list.deleteItem(e),function(t){var e=document.querySelector('[data-itemid="'.concat(t,'"]'));e.parentElement.removeChild(e)}(e))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvbWFpbi5qcyIsIm1hcHBpbmdzIjoieUNBRUEsRUFBUSxNQUVSLEVBQVEsS0FFUixFQUFRLE1BRVIsRUFBUSxLQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLElBRVIsRUFBUSxNQUVSLEVBQVEsTyxlQzVCUixFQUFRLE8sZUNBUkEsRUFBT0MsUUFBVSxFQUFqQixPLDRCQ0VBLElBQUlDLEVBQVEsRUFBUSxNQUNoQkMsRUFBUyxFQUFRLE1BQ2pCQyxFQUFVLEVBQVEsTUFDbEJDLEVBQVcsRUFBUSxNQUNuQkMsRUFBZ0IsRUFBUSxNQUN4QkMsRUFBZSxFQUFRLEtBQ3ZCQyxFQUFrQixFQUFRLE1BQzFCQyxFQUFjLEVBQVEsTUFFMUJULEVBQU9DLFFBQVUsU0FBb0JTLEdBQ25DLE9BQU8sSUFBSUMsU0FBUSxTQUE0QkMsRUFBU0MsR0FDdEQsSUFBSUMsRUFBY0osRUFBT0ssS0FDckJDLEVBQWlCTixFQUFPTyxRQUV4QmYsRUFBTWdCLFdBQVdKLFdBQ1pFLEVBQWUsZ0JBR3hCLElBQUlHLEVBQVUsSUFBSUMsZUFHbEIsR0FBSVYsRUFBT1csS0FBTSxDQUNmLElBQUlDLEVBQVdaLEVBQU9XLEtBQUtDLFVBQVksR0FDbkNDLEVBQVdiLEVBQU9XLEtBQUtFLFNBQVdDLFNBQVNDLG1CQUFtQmYsRUFBT1csS0FBS0UsV0FBYSxHQUMzRlAsRUFBZVUsY0FBZ0IsU0FBV0MsS0FBS0wsRUFBVyxJQUFNQyxHQUdsRSxJQUFJSyxFQUFXdEIsRUFBY0ksRUFBT21CLFFBQVNuQixFQUFPb0IsS0E0RXBELEdBM0VBWCxFQUFRWSxLQUFLckIsRUFBT3NCLE9BQU9DLGNBQWU1QixFQUFTdUIsRUFBVWxCLEVBQU93QixPQUFReEIsRUFBT3lCLG1CQUFtQixHQUd0R2hCLEVBQVFpQixRQUFVMUIsRUFBTzBCLFFBR3pCakIsRUFBUWtCLG1CQUFxQixXQUMzQixHQUFLbEIsR0FBa0MsSUFBdkJBLEVBQVFtQixhQVFELElBQW5CbkIsRUFBUW9CLFFBQWtCcEIsRUFBUXFCLGFBQXdELElBQXpDckIsRUFBUXFCLFlBQVlDLFFBQVEsVUFBakYsQ0FLQSxJQUFJQyxFQUFrQiwwQkFBMkJ2QixFQUFVWixFQUFhWSxFQUFRd0IseUJBQTJCLEtBRXZHQyxFQUFXLENBQ2I3QixLQUZrQkwsRUFBT21DLGNBQXdDLFNBQXhCbkMsRUFBT21DLGFBQWlEMUIsRUFBUXlCLFNBQS9CekIsRUFBUTJCLGFBR2xGUCxPQUFRcEIsRUFBUW9CLE9BQ2hCUSxXQUFZNUIsRUFBUTRCLFdBQ3BCOUIsUUFBU3lCLEVBQ1RoQyxPQUFRQSxFQUNSUyxRQUFTQSxHQUdYaEIsRUFBT1MsRUFBU0MsRUFBUStCLEdBR3hCekIsRUFBVSxPQUlaQSxFQUFRNkIsUUFBVSxXQUNYN0IsSUFJTE4sRUFBT0osRUFBWSxrQkFBbUJDLEVBQVEsZUFBZ0JTLElBRzlEQSxFQUFVLE9BSVpBLEVBQVE4QixRQUFVLFdBR2hCcEMsRUFBT0osRUFBWSxnQkFBaUJDLEVBQVEsS0FBTVMsSUFHbERBLEVBQVUsTUFJWkEsRUFBUStCLFVBQVksV0FDbEIsSUFBSUMsRUFBc0IsY0FBZ0J6QyxFQUFPMEIsUUFBVSxjQUN2RDFCLEVBQU95QyxzQkFDVEEsRUFBc0J6QyxFQUFPeUMscUJBRS9CdEMsRUFBT0osRUFBWTBDLEVBQXFCekMsRUFBUSxlQUM5Q1MsSUFHRkEsRUFBVSxNQU1SakIsRUFBTWtELHVCQUF3QixDQUVoQyxJQUFJQyxHQUFhM0MsRUFBTzRDLGlCQUFtQjlDLEVBQWdCb0IsS0FBY2xCLEVBQU82QyxlQUM5RW5ELEVBQVFvRCxLQUFLOUMsRUFBTzZDLHFCQUNwQkUsRUFFRUosSUFDRnJDLEVBQWVOLEVBQU9nRCxnQkFBa0JMLEdBdUI1QyxHQWxCSSxxQkFBc0JsQyxHQUN4QmpCLEVBQU15RCxRQUFRM0MsR0FBZ0IsU0FBMEI0QyxFQUFLQyxRQUNoQyxJQUFoQi9DLEdBQXFELGlCQUF0QitDLEVBQUlDLHFCQUVyQzlDLEVBQWU2QyxHQUd0QjFDLEVBQVE0QyxpQkFBaUJGLEVBQUtELE1BTS9CMUQsRUFBTThELFlBQVl0RCxFQUFPNEMsbUJBQzVCbkMsRUFBUW1DLGtCQUFvQjVDLEVBQU80QyxpQkFJakM1QyxFQUFPbUMsYUFDVCxJQUNFMUIsRUFBUTBCLGFBQWVuQyxFQUFPbUMsYUFDOUIsTUFBT29CLEdBR1AsR0FBNEIsU0FBeEJ2RCxFQUFPbUMsYUFDVCxNQUFNb0IsRUFNNkIsbUJBQTlCdkQsRUFBT3dELG9CQUNoQi9DLEVBQVFnRCxpQkFBaUIsV0FBWXpELEVBQU93RCxvQkFJUCxtQkFBNUJ4RCxFQUFPMEQsa0JBQW1DakQsRUFBUWtELFFBQzNEbEQsRUFBUWtELE9BQU9GLGlCQUFpQixXQUFZekQsRUFBTzBELGtCQUdqRDFELEVBQU80RCxhQUVUNUQsRUFBTzRELFlBQVlDLFFBQVFDLE1BQUssU0FBb0JDLEdBQzdDdEQsSUFJTEEsRUFBUXVELFFBQ1I3RCxFQUFPNEQsR0FFUHRELEVBQVUsU0FJVEwsSUFDSEEsRUFBYyxNQUloQkssRUFBUXdELEtBQUs3RCxRLDRCQzlLakIsSUFBSVosRUFBUSxFQUFRLE1BQ2hCMEUsRUFBTyxFQUFRLE1BQ2ZDLEVBQVEsRUFBUSxNQUNoQkMsRUFBYyxFQUFRLE1BUzFCLFNBQVNDLEVBQWVDLEdBQ3RCLElBQUlDLEVBQVUsSUFBSUosRUFBTUcsR0FDcEJFLEVBQVdOLEVBQUtDLEVBQU1NLFVBQVVoRSxRQUFTOEQsR0FRN0MsT0FMQS9FLEVBQU1rRixPQUFPRixFQUFVTCxFQUFNTSxVQUFXRixHQUd4Qy9FLEVBQU1rRixPQUFPRixFQUFVRCxHQUVoQkMsRUFJVCxJQUFJRyxFQUFRTixFQXRCRyxFQUFRLE1BeUJ2Qk0sRUFBTVIsTUFBUUEsRUFHZFEsRUFBTUMsT0FBUyxTQUFnQkMsR0FDN0IsT0FBT1IsRUFBZUQsRUFBWU8sRUFBTUcsU0FBVUQsS0FJcERGLEVBQU1JLE9BQVMsRUFBUSxNQUN2QkosRUFBTUssWUFBYyxFQUFRLE1BQzVCTCxFQUFNTSxTQUFXLEVBQVEsTUFHekJOLEVBQU1PLElBQU0sU0FBYUMsR0FDdkIsT0FBT2xGLFFBQVFpRixJQUFJQyxJQUVyQlIsRUFBTVMsT0FBUyxFQUFRLE1BR3ZCVCxFQUFNVSxhQUFlLEVBQVEsS0FFN0IvRixFQUFPQyxRQUFVb0YsRUFHakJyRixFQUFPQyxRQUFRK0YsUUFBVVgsRyxzQkMvQ3pCLFNBQVNJLEVBQU9RLEdBQ2RDLEtBQUtELFFBQVVBLEVBR2pCUixFQUFPTixVQUFVZ0IsU0FBVyxXQUMxQixNQUFPLFVBQVlELEtBQUtELFFBQVUsS0FBT0MsS0FBS0QsUUFBVSxLQUcxRFIsRUFBT04sVUFBVWlCLFlBQWEsRUFFOUJwRyxFQUFPQyxRQUFVd0YsRyw0QkNoQmpCLElBQUlBLEVBQVMsRUFBUSxNQVFyQixTQUFTQyxFQUFZVyxHQUNuQixHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUlDLFVBQVUsZ0NBR3RCLElBQUlDLEVBQ0pMLEtBQUszQixRQUFVLElBQUk1RCxTQUFRLFNBQXlCQyxHQUNsRDJGLEVBQWlCM0YsS0FHbkIsSUFBSTRGLEVBQVFOLEtBQ1pHLEdBQVMsU0FBZ0JKLEdBQ25CTyxFQUFNQyxTQUtWRCxFQUFNQyxPQUFTLElBQUloQixFQUFPUSxHQUMxQk0sRUFBZUMsRUFBTUMsWUFPekJmLEVBQVlQLFVBQVV1QixpQkFBbUIsV0FDdkMsR0FBSVIsS0FBS08sT0FDUCxNQUFNUCxLQUFLTyxRQVFmZixFQUFZaUIsT0FBUyxXQUNuQixJQUFJbEMsRUFJSixNQUFPLENBQ0wrQixNQUpVLElBQUlkLEdBQVksU0FBa0JrQixHQUM1Q25DLEVBQVNtQyxLQUlUbkMsT0FBUUEsSUFJWnpFLEVBQU9DLFFBQVV5RixHLHNCQ3REakIxRixFQUFPQyxRQUFVLFNBQWtCNEcsR0FDakMsU0FBVUEsSUFBU0EsRUFBTVQsYyw0QkNEM0IsSUFBSWxHLEVBQVEsRUFBUSxNQUNoQkcsRUFBVyxFQUFRLE1BQ25CeUcsRUFBcUIsRUFBUSxNQUM3QkMsRUFBa0IsRUFBUSxLQUMxQmpDLEVBQWMsRUFBUSxNQU8xQixTQUFTRCxFQUFNVSxHQUNiVyxLQUFLVixTQUFXRCxFQUNoQlcsS0FBS2MsYUFBZSxDQUNsQjdGLFFBQVMsSUFBSTJGLEVBQ2JsRSxTQUFVLElBQUlrRSxHQVNsQmpDLEVBQU1NLFVBQVVoRSxRQUFVLFNBQWlCVCxHQUduQixpQkFBWEEsR0FDVEEsRUFBU3VHLFVBQVUsSUFBTSxJQUNsQm5GLElBQU1tRixVQUFVLEdBRXZCdkcsRUFBU0EsR0FBVSxJQUdyQkEsRUFBU29FLEVBQVlvQixLQUFLVixTQUFVOUUsSUFHekJzQixPQUNUdEIsRUFBT3NCLE9BQVN0QixFQUFPc0IsT0FBTzhCLGNBQ3JCb0MsS0FBS1YsU0FBU3hELE9BQ3ZCdEIsRUFBT3NCLE9BQVNrRSxLQUFLVixTQUFTeEQsT0FBTzhCLGNBRXJDcEQsRUFBT3NCLE9BQVMsTUFJbEIsSUFBSWtGLEVBQVEsQ0FBQ0gsT0FBaUJ0RCxHQUMxQmMsRUFBVTVELFFBQVFDLFFBQVFGLEdBVTlCLElBUkF3RixLQUFLYyxhQUFhN0YsUUFBUXdDLFNBQVEsU0FBb0N3RCxHQUNwRUQsRUFBTUUsUUFBUUQsRUFBWUUsVUFBV0YsRUFBWUcsYUFHbkRwQixLQUFLYyxhQUFhcEUsU0FBU2UsU0FBUSxTQUFrQ3dELEdBQ25FRCxFQUFNSyxLQUFLSixFQUFZRSxVQUFXRixFQUFZRyxhQUd6Q0osRUFBTU0sUUFDWGpELEVBQVVBLEVBQVFDLEtBQUswQyxFQUFNTyxRQUFTUCxFQUFNTyxTQUc5QyxPQUFPbEQsR0FHVE0sRUFBTU0sVUFBVXVDLE9BQVMsU0FBZ0JoSCxHQUV2QyxPQURBQSxFQUFTb0UsRUFBWW9CLEtBQUtWLFNBQVU5RSxHQUM3QkwsRUFBU0ssRUFBT29CLElBQUtwQixFQUFPd0IsT0FBUXhCLEVBQU95QixrQkFBa0J3RixRQUFRLE1BQU8sS0FJckZ6SCxFQUFNeUQsUUFBUSxDQUFDLFNBQVUsTUFBTyxPQUFRLFlBQVksU0FBNkIzQixHQUUvRTZDLEVBQU1NLFVBQVVuRCxHQUFVLFNBQVNGLEVBQUtwQixHQUN0QyxPQUFPd0YsS0FBSy9FLFFBQVEyRCxFQUFZcEUsR0FBVSxHQUFJLENBQzVDc0IsT0FBUUEsRUFDUkYsSUFBS0EsRUFDTGYsTUFBT0wsR0FBVSxJQUFJSyxZQUszQmIsRUFBTXlELFFBQVEsQ0FBQyxPQUFRLE1BQU8sVUFBVSxTQUErQjNCLEdBRXJFNkMsRUFBTU0sVUFBVW5ELEdBQVUsU0FBU0YsRUFBS2YsRUFBTUwsR0FDNUMsT0FBT3dGLEtBQUsvRSxRQUFRMkQsRUFBWXBFLEdBQVUsR0FBSSxDQUM1Q3NCLE9BQVFBLEVBQ1JGLElBQUtBLEVBQ0xmLEtBQU1BLFNBS1pmLEVBQU9DLFFBQVU0RSxHLDRCQzVGakIsSUFBSTNFLEVBQVEsRUFBUSxNQUVwQixTQUFTNEcsSUFDUFosS0FBSzBCLFNBQVcsR0FXbEJkLEVBQW1CM0IsVUFBVTBDLElBQU0sU0FBYVIsRUFBV0MsR0FLekQsT0FKQXBCLEtBQUswQixTQUFTTCxLQUFLLENBQ2pCRixVQUFXQSxFQUNYQyxTQUFVQSxJQUVMcEIsS0FBSzBCLFNBQVNKLE9BQVMsR0FRaENWLEVBQW1CM0IsVUFBVTJDLE1BQVEsU0FBZUMsR0FDOUM3QixLQUFLMEIsU0FBU0csS0FDaEI3QixLQUFLMEIsU0FBU0csR0FBTSxPQVl4QmpCLEVBQW1CM0IsVUFBVXhCLFFBQVUsU0FBaUJxRSxHQUN0RDlILEVBQU15RCxRQUFRdUMsS0FBSzBCLFVBQVUsU0FBd0JLLEdBQ3pDLE9BQU5BLEdBQ0ZELEVBQUdDLE9BS1RqSSxFQUFPQyxRQUFVNkcsRyw0QkNqRGpCLElBQUlvQixFQUFnQixFQUFRLEtBQ3hCQyxFQUFjLEVBQVEsTUFXMUJuSSxFQUFPQyxRQUFVLFNBQXVCNEIsRUFBU3VHLEdBQy9DLE9BQUl2RyxJQUFZcUcsRUFBY0UsR0FDckJELEVBQVl0RyxFQUFTdUcsR0FFdkJBLEksNEJDaEJULElBQUlDLEVBQWUsRUFBUSxNQVkzQnJJLEVBQU9DLFFBQVUsU0FBcUJnRyxFQUFTdkYsRUFBUTRILEVBQU1uSCxFQUFTeUIsR0FDcEUsSUFBSTJGLEVBQVEsSUFBSUMsTUFBTXZDLEdBQ3RCLE9BQU9vQyxFQUFhRSxFQUFPN0gsRUFBUTRILEVBQU1uSCxFQUFTeUIsSywyQkNkcEQsSUFBSTFDLEVBQVEsRUFBUSxNQUNoQnVJLEVBQWdCLEVBQVEsTUFDeEI5QyxFQUFXLEVBQVEsTUFDbkJILEVBQVcsRUFBUSxLQUt2QixTQUFTa0QsRUFBNkJoSSxHQUNoQ0EsRUFBTzRELGFBQ1Q1RCxFQUFPNEQsWUFBWW9DLG1CQVV2QjFHLEVBQU9DLFFBQVUsU0FBeUJTLEdBNkJ4QyxPQTVCQWdJLEVBQTZCaEksR0FHN0JBLEVBQU9PLFFBQVVQLEVBQU9PLFNBQVcsR0FHbkNQLEVBQU9LLEtBQU8wSCxFQUNaL0gsRUFBT0ssS0FDUEwsRUFBT08sUUFDUFAsRUFBT2lJLGtCQUlUakksRUFBT08sUUFBVWYsRUFBTTBJLE1BQ3JCbEksRUFBT08sUUFBUTRILFFBQVUsR0FDekJuSSxFQUFPTyxRQUFRUCxFQUFPc0IsU0FBVyxHQUNqQ3RCLEVBQU9PLFNBR1RmLEVBQU15RCxRQUNKLENBQUMsU0FBVSxNQUFPLE9BQVEsT0FBUSxNQUFPLFFBQVMsV0FDbEQsU0FBMkIzQixVQUNsQnRCLEVBQU9PLFFBQVFlLE9BSVp0QixFQUFPb0ksU0FBV3RELEVBQVNzRCxTQUUxQnBJLEdBQVE4RCxNQUFLLFNBQTZCNUIsR0FVdkQsT0FUQThGLEVBQTZCaEksR0FHN0JrQyxFQUFTN0IsS0FBTzBILEVBQ2Q3RixFQUFTN0IsS0FDVDZCLEVBQVMzQixRQUNUUCxFQUFPcUksbUJBR0ZuRyxLQUNOLFNBQTRCNkQsR0FjN0IsT0FiS2QsRUFBU2MsS0FDWmlDLEVBQTZCaEksR0FHekIrRixHQUFVQSxFQUFPN0QsV0FDbkI2RCxFQUFPN0QsU0FBUzdCLEtBQU8wSCxFQUNyQmhDLEVBQU83RCxTQUFTN0IsS0FDaEIwRixFQUFPN0QsU0FBUzNCLFFBQ2hCUCxFQUFPcUkscUJBS05wSSxRQUFRRSxPQUFPNEYsUSxzQkNoRTFCekcsRUFBT0MsUUFBVSxTQUFzQnNJLEVBQU83SCxFQUFRNEgsRUFBTW5ILEVBQVN5QixHQTRCbkUsT0EzQkEyRixFQUFNN0gsT0FBU0EsRUFDWDRILElBQ0ZDLEVBQU1ELEtBQU9BLEdBR2ZDLEVBQU1wSCxRQUFVQSxFQUNoQm9ILEVBQU0zRixTQUFXQSxFQUNqQjJGLEVBQU14QyxjQUFlLEVBRXJCd0MsRUFBTVMsT0FBUyxXQUNiLE1BQU8sQ0FFTC9DLFFBQVNDLEtBQUtELFFBQ2RnRCxLQUFNL0MsS0FBSytDLEtBRVhDLFlBQWFoRCxLQUFLZ0QsWUFDbEJDLE9BQVFqRCxLQUFLaUQsT0FFYkMsU0FBVWxELEtBQUtrRCxTQUNmQyxXQUFZbkQsS0FBS21ELFdBQ2pCQyxhQUFjcEQsS0FBS29ELGFBQ25CQyxNQUFPckQsS0FBS3FELE1BRVo3SSxPQUFRd0YsS0FBS3hGLE9BQ2I0SCxLQUFNcEMsS0FBS29DLE9BR1JDLEksNEJDdENULElBQUlySSxFQUFRLEVBQVEsTUFVcEJGLEVBQU9DLFFBQVUsU0FBcUJ1SixFQUFTQyxHQUU3Q0EsRUFBVUEsR0FBVyxHQUNyQixJQUFJL0ksRUFBUyxHQUVUZ0osRUFBdUIsQ0FBQyxNQUFPLFNBQVUsUUFDekNDLEVBQTBCLENBQUMsVUFBVyxPQUFRLFFBQVMsVUFDdkRDLEVBQXVCLENBQ3pCLFVBQVcsbUJBQW9CLG9CQUFxQixtQkFDcEQsVUFBVyxpQkFBa0Isa0JBQW1CLFVBQVcsZUFBZ0IsaUJBQzNFLGlCQUFrQixtQkFBb0IscUJBQXNCLGFBQzVELG1CQUFvQixnQkFBaUIsZUFBZ0IsWUFBYSxZQUNsRSxhQUFjLGNBQWUsYUFBYyxvQkFFekNDLEVBQWtCLENBQUMsa0JBRXZCLFNBQVNDLEVBQWVDLEVBQVFwRCxHQUM5QixPQUFJekcsRUFBTThKLGNBQWNELElBQVc3SixFQUFNOEosY0FBY3JELEdBQzlDekcsRUFBTTBJLE1BQU1tQixFQUFRcEQsR0FDbEJ6RyxFQUFNOEosY0FBY3JELEdBQ3RCekcsRUFBTTBJLE1BQU0sR0FBSWpDLEdBQ2R6RyxFQUFNK0osUUFBUXRELEdBQ2hCQSxFQUFPdUQsUUFFVHZELEVBR1QsU0FBU3dELEVBQW9CQyxHQUN0QmxLLEVBQU04RCxZQUFZeUYsRUFBUVcsSUFFbkJsSyxFQUFNOEQsWUFBWXdGLEVBQVFZLE1BQ3BDMUosRUFBTzBKLEdBQVFOLE9BQWVyRyxFQUFXK0YsRUFBUVksS0FGakQxSixFQUFPMEosR0FBUU4sRUFBZU4sRUFBUVksR0FBT1gsRUFBUVcsSUFNekRsSyxFQUFNeUQsUUFBUStGLEdBQXNCLFNBQTBCVSxHQUN2RGxLLEVBQU04RCxZQUFZeUYsRUFBUVcsTUFDN0IxSixFQUFPMEosR0FBUU4sT0FBZXJHLEVBQVdnRyxFQUFRVyxRQUlyRGxLLEVBQU15RCxRQUFRZ0csRUFBeUJRLEdBRXZDakssRUFBTXlELFFBQVFpRyxHQUFzQixTQUEwQlEsR0FDdkRsSyxFQUFNOEQsWUFBWXlGLEVBQVFXLElBRW5CbEssRUFBTThELFlBQVl3RixFQUFRWSxNQUNwQzFKLEVBQU8wSixHQUFRTixPQUFlckcsRUFBVytGLEVBQVFZLEtBRmpEMUosRUFBTzBKLEdBQVFOLE9BQWVyRyxFQUFXZ0csRUFBUVcsT0FNckRsSyxFQUFNeUQsUUFBUWtHLEdBQWlCLFNBQWVPLEdBQ3hDQSxLQUFRWCxFQUNWL0ksRUFBTzBKLEdBQVFOLEVBQWVOLEVBQVFZLEdBQU9YLEVBQVFXLElBQzVDQSxLQUFRWixJQUNqQjlJLEVBQU8wSixHQUFRTixPQUFlckcsRUFBVytGLEVBQVFZLFFBSXJELElBQUlDLEVBQVlYLEVBQ2JZLE9BQU9YLEdBQ1BXLE9BQU9WLEdBQ1BVLE9BQU9ULEdBRU5VLEVBQVlDLE9BQ2JDLEtBQUtqQixHQUNMYyxPQUFPRSxPQUFPQyxLQUFLaEIsSUFDbkJpQixRQUFPLFNBQXlCN0csR0FDL0IsT0FBbUMsSUFBNUJ3RyxFQUFVNUgsUUFBUW9CLE1BSzdCLE9BRkEzRCxFQUFNeUQsUUFBUTRHLEVBQVdKLEdBRWxCekosSSw0QkNuRlQsSUFBSUQsRUFBYyxFQUFRLE1BUzFCVCxFQUFPQyxRQUFVLFNBQWdCVyxFQUFTQyxFQUFRK0IsR0FDaEQsSUFBSStILEVBQWlCL0gsRUFBU2xDLE9BQU9pSyxlQUNoQy9ILEVBQVNMLFFBQVdvSSxJQUFrQkEsRUFBZS9ILEVBQVNMLFFBR2pFMUIsRUFBT0osRUFDTCxtQ0FBcUNtQyxFQUFTTCxPQUM5Q0ssRUFBU2xDLE9BQ1QsS0FDQWtDLEVBQVN6QixRQUNUeUIsSUFQRmhDLEVBQVFnQyxLLDRCQ1paLElBQUkxQyxFQUFRLEVBQVEsTUFVcEJGLEVBQU9DLFFBQVUsU0FBdUJjLEVBQU1FLEVBQVMySixHQU1yRCxPQUpBMUssRUFBTXlELFFBQVFpSCxHQUFLLFNBQW1CNUMsR0FDcENqSCxFQUFPaUgsRUFBR2pILEVBQU1FLE1BR1hGLEksMkJDaEJULElBQUliLEVBQVEsRUFBUSxNQUNoQjJLLEVBQXNCLEVBQVEsTUFFOUJDLEVBQXVCLENBQ3pCLGVBQWdCLHFDQUdsQixTQUFTQyxFQUFzQjlKLEVBQVM0RixJQUNqQzNHLEVBQU04RCxZQUFZL0MsSUFBWWYsRUFBTThELFlBQVkvQyxFQUFRLG1CQUMzREEsRUFBUSxnQkFBa0I0RixHQWdCOUIsSUFYTWlDLEVBV0Z0RCxFQUFXLENBQ2JzRCxVQVg4QixvQkFBbkIxSCxnQkFHbUIsb0JBQVo0SixTQUF1RSxxQkFBNUNSLE9BQU9yRixVQUFVZ0IsU0FBUzhFLEtBQUtELFlBRDFFbEMsRUFBVSxFQUFRLE9BS2JBLEdBTVBILGlCQUFrQixDQUFDLFNBQTBCNUgsRUFBTUUsR0FHakQsT0FGQTRKLEVBQW9CNUosRUFBUyxVQUM3QjRKLEVBQW9CNUosRUFBUyxnQkFDekJmLEVBQU1nQixXQUFXSCxJQUNuQmIsRUFBTWdMLGNBQWNuSyxJQUNwQmIsRUFBTWlMLFNBQVNwSyxJQUNmYixFQUFNa0wsU0FBU3JLLElBQ2ZiLEVBQU1tTCxPQUFPdEssSUFDYmIsRUFBTW9MLE9BQU92SyxHQUVOQSxFQUVMYixFQUFNcUwsa0JBQWtCeEssR0FDbkJBLEVBQUt5SyxPQUVWdEwsRUFBTXVMLGtCQUFrQjFLLElBQzFCZ0ssRUFBc0I5SixFQUFTLG1EQUN4QkYsRUFBS29GLFlBRVZqRyxFQUFNd0wsU0FBUzNLLElBQ2pCZ0ssRUFBc0I5SixFQUFTLGtDQUN4QjBLLEtBQUtDLFVBQVU3SyxJQUVqQkEsSUFHVGdJLGtCQUFtQixDQUFDLFNBQTJCaEksR0FFN0MsR0FBb0IsaUJBQVRBLEVBQ1QsSUFDRUEsRUFBTzRLLEtBQUtFLE1BQU05SyxHQUNsQixNQUFPa0QsSUFFWCxPQUFPbEQsSUFPVHFCLFFBQVMsRUFFVG1CLGVBQWdCLGFBQ2hCRyxlQUFnQixlQUVoQm9JLGtCQUFtQixFQUNuQkMsZUFBZ0IsRUFFaEJwQixlQUFnQixTQUF3QnBJLEdBQ3RDLE9BQU9BLEdBQVUsS0FBT0EsRUFBUyxLQUlyQyxRQUFtQixDQUNqQnNHLE9BQVEsQ0FDTixPQUFVLHVDQUlkM0ksRUFBTXlELFFBQVEsQ0FBQyxTQUFVLE1BQU8sU0FBUyxTQUE2QjNCLEdBQ3BFd0QsRUFBU3ZFLFFBQVFlLEdBQVUsTUFHN0I5QixFQUFNeUQsUUFBUSxDQUFDLE9BQVEsTUFBTyxVQUFVLFNBQStCM0IsR0FDckV3RCxFQUFTdkUsUUFBUWUsR0FBVTlCLEVBQU0wSSxNQUFNa0MsTUFHekM5SyxFQUFPQyxRQUFVdUYsRyxzQkMvRmpCeEYsRUFBT0MsUUFBVSxTQUFjK0gsRUFBSWdFLEdBQ2pDLE9BQU8sV0FFTCxJQURBLElBQUlDLEVBQU8sSUFBSUMsTUFBTWpGLFVBQVVPLFFBQ3RCMkUsRUFBSSxFQUFHQSxFQUFJRixFQUFLekUsT0FBUTJFLElBQy9CRixFQUFLRSxHQUFLbEYsVUFBVWtGLEdBRXRCLE9BQU9uRSxFQUFHb0UsTUFBTUosRUFBU0MsTSw0QkNON0IsSUFBSS9MLEVBQVEsRUFBUSxNQUVwQixTQUFTbU0sRUFBT3pJLEdBQ2QsT0FBT25DLG1CQUFtQm1DLEdBQ3hCK0QsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQVVyQjNILEVBQU9DLFFBQVUsU0FBa0I2QixFQUFLSSxFQUFRQyxHQUU5QyxJQUFLRCxFQUNILE9BQU9KLEVBR1QsSUFBSXdLLEVBQ0osR0FBSW5LLEVBQ0ZtSyxFQUFtQm5LLEVBQWlCRCxRQUMvQixHQUFJaEMsRUFBTXVMLGtCQUFrQnZKLEdBQ2pDb0ssRUFBbUJwSyxFQUFPaUUsZUFDckIsQ0FDTCxJQUFJb0csRUFBUSxHQUVack0sRUFBTXlELFFBQVF6QixHQUFRLFNBQW1CMEIsRUFBS0MsR0FDeENELE1BQUFBLElBSUExRCxFQUFNK0osUUFBUXJHLEdBQ2hCQyxHQUFZLEtBRVpELEVBQU0sQ0FBQ0EsR0FHVDFELEVBQU15RCxRQUFRQyxHQUFLLFNBQW9CNEksR0FDakN0TSxFQUFNdU0sT0FBT0QsR0FDZkEsRUFBSUEsRUFBRUUsY0FDR3hNLEVBQU13TCxTQUFTYyxLQUN4QkEsRUFBSWIsS0FBS0MsVUFBVVksSUFFckJELEVBQU1oRixLQUFLOEUsRUFBT3hJLEdBQU8sSUFBTXdJLEVBQU9HLFdBSTFDRixFQUFtQkMsRUFBTUksS0FBSyxLQUdoQyxHQUFJTCxFQUFrQixDQUNwQixJQUFJTSxFQUFnQjlLLEVBQUlXLFFBQVEsTUFDVCxJQUFuQm1LLElBQ0Y5SyxFQUFNQSxFQUFJb0ksTUFBTSxFQUFHMEMsSUFHckI5SyxLQUE4QixJQUF0QkEsRUFBSVcsUUFBUSxLQUFjLElBQU0sS0FBTzZKLEVBR2pELE9BQU94SyxJLHNCQzNEVDlCLEVBQU9DLFFBQVUsU0FBcUI0QixFQUFTZ0wsR0FDN0MsT0FBT0EsRUFDSGhMLEVBQVE4RixRQUFRLE9BQVEsSUFBTSxJQUFNa0YsRUFBWWxGLFFBQVEsT0FBUSxJQUNoRTlGLEksNEJDVk4sSUFBSTNCLEVBQVEsRUFBUSxNQUVwQkYsRUFBT0MsUUFDTEMsRUFBTWtELHVCQUlLLENBQ0wwSixNQUFPLFNBQWU3RCxFQUFNcEMsRUFBT2tHLEVBQVNDLEVBQU1DLEVBQVFDLEdBQ3hELElBQUlDLEVBQVMsR0FDYkEsRUFBTzVGLEtBQUswQixFQUFPLElBQU14SCxtQkFBbUJvRixJQUV4QzNHLEVBQU1rTixTQUFTTCxJQUNqQkksRUFBTzVGLEtBQUssV0FBYSxJQUFJOEYsS0FBS04sR0FBU08sZUFHekNwTixFQUFNcU4sU0FBU1AsSUFDakJHLEVBQU81RixLQUFLLFFBQVV5RixHQUdwQjlNLEVBQU1xTixTQUFTTixJQUNqQkUsRUFBTzVGLEtBQUssVUFBWTBGLElBR1gsSUFBWEMsR0FDRkMsRUFBTzVGLEtBQUssVUFHZGlHLFNBQVNMLE9BQVNBLEVBQU9SLEtBQUssT0FHaENuSixLQUFNLFNBQWN5RixHQUNsQixJQUFJd0UsRUFBUUQsU0FBU0wsT0FBT00sTUFBTSxJQUFJQyxPQUFPLGFBQWV6RSxFQUFPLGNBQ25FLE9BQVF3RSxFQUFRRSxtQkFBbUJGLEVBQU0sSUFBTSxNQUdqREcsT0FBUSxTQUFnQjNFLEdBQ3RCL0MsS0FBSzRHLE1BQU03RCxFQUFNLEdBQUlvRSxLQUFLUSxNQUFRLFNBTy9CLENBQ0xmLE1BQU8sYUFDUHRKLEtBQU0sV0FBa0IsT0FBTyxNQUMvQm9LLE9BQVEsZSxxQkN6Q2hCNU4sRUFBT0MsUUFBVSxTQUF1QjZCLEdBSXRDLE1BQU8sZ0NBQWdDZ00sS0FBS2hNLEsscUJDSjlDOUIsRUFBT0MsUUFBVSxTQUFzQjhOLEdBQ3JDLE1BQTJCLGlCQUFaQSxJQUFtRCxJQUF6QkEsRUFBUWhJLGUsNEJDUG5ELElBQUk3RixFQUFRLEVBQVEsTUFFcEJGLEVBQU9DLFFBQ0xDLEVBQU1rRCx1QkFJSixXQUNFLElBRUk0SyxFQUZBQyxFQUFPLGtCQUFrQkgsS0FBS0ksVUFBVUMsV0FDeENDLEVBQWlCWixTQUFTYSxjQUFjLEtBUzVDLFNBQVNDLEVBQVd4TSxHQUNsQixJQUFJeU0sRUFBT3pNLEVBV1gsT0FUSW1NLElBRUZHLEVBQWVJLGFBQWEsT0FBUUQsR0FDcENBLEVBQU9ILEVBQWVHLE1BR3hCSCxFQUFlSSxhQUFhLE9BQVFELEdBRzdCLENBQ0xBLEtBQU1ILEVBQWVHLEtBQ3JCRSxTQUFVTCxFQUFlSyxTQUFXTCxFQUFlSyxTQUFTOUcsUUFBUSxLQUFNLElBQU0sR0FDaEYrRyxLQUFNTixFQUFlTSxLQUNyQkMsT0FBUVAsRUFBZU8sT0FBU1AsRUFBZU8sT0FBT2hILFFBQVEsTUFBTyxJQUFNLEdBQzNFaUgsS0FBTVIsRUFBZVEsS0FBT1IsRUFBZVEsS0FBS2pILFFBQVEsS0FBTSxJQUFNLEdBQ3BFa0gsU0FBVVQsRUFBZVMsU0FDekJDLEtBQU1WLEVBQWVVLEtBQ3JCQyxTQUFpRCxNQUF0Q1gsRUFBZVcsU0FBU0MsT0FBTyxHQUN4Q1osRUFBZVcsU0FDZixJQUFNWCxFQUFlVyxVQVkzQixPQVJBZixFQUFZTSxFQUFXVyxPQUFPQyxTQUFTWCxNQVFoQyxTQUF5QlksR0FDOUIsSUFBSUMsRUFBVWxQLEVBQU1xTixTQUFTNEIsR0FBZWIsRUFBV2EsR0FBY0EsRUFDckUsT0FBUUMsRUFBT1gsV0FBYVQsRUFBVVMsVUFDbENXLEVBQU9WLE9BQVNWLEVBQVVVLE1BaERsQyxHQXNEUyxXQUNMLE9BQU8sSSw0QkM5RGYsSUFBSXhPLEVBQVEsRUFBUSxNQUVwQkYsRUFBT0MsUUFBVSxTQUE2QmdCLEVBQVNvTyxHQUNyRG5QLEVBQU15RCxRQUFRMUMsR0FBUyxTQUF1QjRGLEVBQU9vQyxHQUMvQ0EsSUFBU29HLEdBQWtCcEcsRUFBS2hILGdCQUFrQm9OLEVBQWVwTixnQkFDbkVoQixFQUFRb08sR0FBa0J4SSxTQUNuQjVGLEVBQVFnSSxTLDJCQ05yQixJQUFJL0ksRUFBUSxFQUFRLE1BSWhCb1AsRUFBb0IsQ0FDdEIsTUFBTyxnQkFBaUIsaUJBQWtCLGVBQWdCLE9BQzFELFVBQVcsT0FBUSxPQUFRLG9CQUFxQixzQkFDaEQsZ0JBQWlCLFdBQVksZUFBZ0Isc0JBQzdDLFVBQVcsY0FBZSxjQWdCNUJ0UCxFQUFPQyxRQUFVLFNBQXNCZ0IsR0FDckMsSUFDSTRDLEVBQ0FELEVBQ0F1SSxFQUhBaUQsRUFBUyxHQUtiLE9BQUtuTyxHQUVMZixFQUFNeUQsUUFBUTFDLEVBQVFzTyxNQUFNLE9BQU8sU0FBZ0JDLEdBS2pELEdBSkFyRCxFQUFJcUQsRUFBSy9NLFFBQVEsS0FDakJvQixFQUFNM0QsRUFBTXVQLEtBQUtELEVBQUtFLE9BQU8sRUFBR3ZELElBQUlySSxjQUNwQ0YsRUFBTTFELEVBQU11UCxLQUFLRCxFQUFLRSxPQUFPdkQsRUFBSSxJQUU3QnRJLEVBQUssQ0FDUCxHQUFJdUwsRUFBT3ZMLElBQVF5TCxFQUFrQjdNLFFBQVFvQixJQUFRLEVBQ25ELE9BR0F1TCxFQUFPdkwsR0FERyxlQUFSQSxHQUNhdUwsRUFBT3ZMLEdBQU91TCxFQUFPdkwsR0FBTyxJQUFJeUcsT0FBTyxDQUFDMUcsSUFFekN3TCxFQUFPdkwsR0FBT3VMLEVBQU92TCxHQUFPLEtBQU9ELEVBQU1BLE1BS3REd0wsR0FuQmdCQSxJLHNCQ1Z6QnBQLEVBQU9DLFFBQVUsU0FBZ0IwUCxHQUMvQixPQUFPLFNBQWNDLEdBQ25CLE9BQU9ELEVBQVN2RCxNQUFNLEtBQU13RCxNLDRCQ3RCaEMsSUFBSWhMLEVBQU8sRUFBUSxNQU1mdUIsRUFBV3FFLE9BQU9yRixVQUFVZ0IsU0FRaEMsU0FBUzhELEVBQVFyRyxHQUNmLE1BQThCLG1CQUF2QnVDLEVBQVM4RSxLQUFLckgsR0FTdkIsU0FBU0ksRUFBWUosR0FDbkIsWUFBc0IsSUFBUkEsRUE0RWhCLFNBQVM4SCxFQUFTOUgsR0FDaEIsT0FBZSxPQUFSQSxHQUErQixpQkFBUkEsRUFTaEMsU0FBU29HLEVBQWNwRyxHQUNyQixHQUEyQixvQkFBdkJ1QyxFQUFTOEUsS0FBS3JILEdBQ2hCLE9BQU8sRUFHVCxJQUFJdUIsRUFBWXFGLE9BQU9xRixlQUFlak0sR0FDdEMsT0FBcUIsT0FBZHVCLEdBQXNCQSxJQUFjcUYsT0FBT3JGLFVBdUNwRCxTQUFTMkssRUFBV2xNLEdBQ2xCLE1BQThCLHNCQUF2QnVDLEVBQVM4RSxLQUFLckgsR0F3RXZCLFNBQVNELEVBQVFvTSxFQUFLL0gsR0FFcEIsR0FBSStILE1BQUFBLEVBVUosR0FMbUIsaUJBQVJBLElBRVRBLEVBQU0sQ0FBQ0EsSUFHTDlGLEVBQVE4RixHQUVWLElBQUssSUFBSTVELEVBQUksRUFBRzZELEVBQUlELEVBQUl2SSxPQUFRMkUsRUFBSTZELEVBQUc3RCxJQUNyQ25FLEVBQUdpRCxLQUFLLEtBQU04RSxFQUFJNUQsR0FBSUEsRUFBRzRELFFBSTNCLElBQUssSUFBSWxNLEtBQU9rTSxFQUNWdkYsT0FBT3JGLFVBQVU4SyxlQUFlaEYsS0FBSzhFLEVBQUtsTSxJQUM1Q21FLEVBQUdpRCxLQUFLLEtBQU04RSxFQUFJbE0sR0FBTUEsRUFBS2tNLEdBMkVyQy9QLEVBQU9DLFFBQVUsQ0FDZmdLLFFBQVNBLEVBQ1RpQixjQTFSRixTQUF1QnRILEdBQ3JCLE1BQThCLHlCQUF2QnVDLEVBQVM4RSxLQUFLckgsSUEwUnJCdUgsU0F0U0YsU0FBa0J2SCxHQUNoQixPQUFlLE9BQVJBLElBQWlCSSxFQUFZSixJQUE0QixPQUFwQkEsRUFBSXNNLGNBQXlCbE0sRUFBWUosRUFBSXNNLGNBQ2hELG1CQUE3QnRNLEVBQUlzTSxZQUFZL0UsVUFBMkJ2SCxFQUFJc00sWUFBWS9FLFNBQVN2SCxJQXFTaEYxQyxXQWxSRixTQUFvQjBDLEdBQ2xCLE1BQTRCLG9CQUFidU0sVUFBOEJ2TSxhQUFldU0sVUFrUjVENUUsa0JBelFGLFNBQTJCM0gsR0FPekIsTUFMNEIsb0JBQWhCd00sYUFBaUNBLFlBQWtCLE9BQ3BEQSxZQUFZQyxPQUFPek0sR0FFbkIsR0FBVUEsRUFBVSxRQUFNQSxFQUFJNEgsa0JBQWtCNEUsYUFxUTNEN0MsU0ExUEYsU0FBa0IzSixHQUNoQixNQUFzQixpQkFBUkEsR0EwUGR3SixTQWpQRixTQUFrQnhKLEdBQ2hCLE1BQXNCLGlCQUFSQSxHQWlQZDhILFNBQVVBLEVBQ1YxQixjQUFlQSxFQUNmaEcsWUFBYUEsRUFDYnlJLE9BbE5GLFNBQWdCN0ksR0FDZCxNQUE4QixrQkFBdkJ1QyxFQUFTOEUsS0FBS3JILElBa05yQnlILE9Bek1GLFNBQWdCekgsR0FDZCxNQUE4QixrQkFBdkJ1QyxFQUFTOEUsS0FBS3JILElBeU1yQjBILE9BaE1GLFNBQWdCMUgsR0FDZCxNQUE4QixrQkFBdkJ1QyxFQUFTOEUsS0FBS3JILElBZ01yQmtNLFdBQVlBLEVBQ1oxRSxTQTlLRixTQUFrQnhILEdBQ2hCLE9BQU84SCxFQUFTOUgsSUFBUWtNLEVBQVdsTSxFQUFJME0sT0E4S3ZDN0Usa0JBcktGLFNBQTJCN0gsR0FDekIsTUFBa0Msb0JBQXBCMk0saUJBQW1DM00sYUFBZTJNLGlCQXFLaEVuTixxQkF6SUYsV0FDRSxPQUF5QixvQkFBZDhLLFdBQW9ELGdCQUF0QkEsVUFBVXNDLFNBQ1ksaUJBQXRCdEMsVUFBVXNDLFNBQ1ksT0FBdEJ0QyxVQUFVc0MsVUFJL0Isb0JBQVh2QixRQUNhLG9CQUFiekIsVUFrSVQ3SixRQUFTQSxFQUNUaUYsTUF2RUYsU0FBU0EsSUFDUCxJQUFJNkgsRUFBUyxHQUNiLFNBQVNDLEVBQVk5TSxFQUFLQyxHQUNwQm1HLEVBQWN5RyxFQUFPNU0sS0FBU21HLEVBQWNwRyxHQUM5QzZNLEVBQU81TSxHQUFPK0UsRUFBTTZILEVBQU81TSxHQUFNRCxHQUN4Qm9HLEVBQWNwRyxHQUN2QjZNLEVBQU81TSxHQUFPK0UsRUFBTSxHQUFJaEYsR0FDZnFHLEVBQVFyRyxHQUNqQjZNLEVBQU81TSxHQUFPRCxFQUFJc0csUUFFbEJ1RyxFQUFPNU0sR0FBT0QsRUFJbEIsSUFBSyxJQUFJdUksRUFBSSxFQUFHNkQsRUFBSS9JLFVBQVVPLE9BQVEyRSxFQUFJNkQsRUFBRzdELElBQzNDeEksRUFBUXNELFVBQVVrRixHQUFJdUUsR0FFeEIsT0FBT0QsR0F1RFByTCxPQTVDRixTQUFnQnVMLEVBQUdDLEVBQUc1RSxHQVFwQixPQVBBckksRUFBUWlOLEdBQUcsU0FBcUJoTixFQUFLQyxHQUVqQzhNLEVBQUU5TSxHQURBbUksR0FBMEIsbUJBQVJwSSxFQUNYZ0IsRUFBS2hCLEVBQUtvSSxHQUVWcEksS0FHTitNLEdBcUNQbEIsS0FoS0YsU0FBY29CLEdBQ1osT0FBT0EsRUFBSWxKLFFBQVEsT0FBUSxJQUFJQSxRQUFRLE9BQVEsS0FnSy9DbUosU0E3QkYsU0FBa0JDLEdBSWhCLE9BSDhCLFFBQTFCQSxFQUFRQyxXQUFXLEtBQ3JCRCxFQUFVQSxFQUFRN0csTUFBTSxJQUVuQjZHLEssZUNwVVQsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLElBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFB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LE1BQVEsSUFBSUYsR0FDcEMsSUQ1RXlCdnVDLEVBQ25CbVgsRUMyRUF5NUIsRUFBZ0IzSyxFQUFNc0csT0FBT3ZzQyxHQUNuQyxHQUFJaW1DLEVBQU13SSxNQUFNUSxRQUFRMkIsR0FDdEIzSyxFQUFNd0ksTUFBTW9DLFdBQVdELEdEOUVBNXdDLEVDK0VGNHdDLEdEOUVqQno1QixFQUFVMVIsU0FBUzZsQyxjQUFULDhCQUNTdHJDLEVBRFQsT0FFZHFzQyxnQkFDV2wxQixFQUFRazFCLGNBQWM5bkIsWUFBWXBOLEdDNEU3Q281QixHQUF3QixPQUNuQixDQUNMLElBQU1oQixFQUFVdEosRUFBTXdJLE1BQU1xQyxRQUMxQkYsRUFDQTNLLEVBQU1zRyxPQUFPSSxNQUNiMUcsRUFBTXNHLE9BQU9LLFVBQ2IzRyxFQUFNc0csT0FBT0csV0FFZjZELEVBQXNCaEIsR0FDdEJnQixHQUF3QixHQUUxQkEsRUFBeUJ0SyxFQUFNd0ksTUFBTStCLG9CQVFuQ08sTUFJSjNGLEVBQVlRLGFBQWF4dkMsaUJBQWlCLFNBQVMsU0FBQ0YsR0FDbEQsSUFBTThELEVBQUs5RCxFQUFFOEYsT0FBT2l1QyxRQUFRLG1CQUFtQkcsUUFBUVksT0FFckQ5MEMsRUFBRThGLE9BQU9xcUMsY0FBY0EsY0FBY0EsY0FBYytELFFBQVFZLFFBQVVoeEMsR0FDckU5RCxFQUFFOEYsT0FBT3FxQyxjQUFjQSxjQUFjK0QsUUFBUVksUUFBVWh4QyxJQUV2RGltQyxFQUFNL2QsS0FBSytvQixXQUFXanhDLEdFMUhBLFNBQUNBLEdBQ3pCLElBQU1ndUMsRUFBT3ZvQyxTQUFTNmxDLGNBQVQsd0JBQXdDdHJDLEVBQXhDLE9BQ2JndUMsRUFBSzNCLGNBQWM5bkIsWUFBWXlwQixHRnlIN0JrRCxDQUFvQmx4QyxRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL25vQ29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbm9Db25mbGljdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL25vZGVfbW9kdWxlcy91bmlxaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZWNpcGVzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlY2lwZXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlY2lwZXMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vc3JjL2pzL21vZGVsL1NlYXJjaC5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vc3JjL2pzL3ZpZXcvYmFzZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vc3JjL2pzL3ZpZXcvc2VhcmNoVmlldy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vc3JjL2pzL21vZGVsL1JlY2lwZS5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vc3JjL2pzL21vZGVsL0xpc3QuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL3NyYy9qcy92aWV3L3JlY2lwZVZpZXcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL3NyYy9qcy9tb2RlbC9MaWtlLmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9zcmMvanMvdmlldy9saWtlVmlldy5qcyIsIndlYnBhY2s6Ly9yZWNpcGVzLy4vc3JjL2pzL2luZGV4LmpzIiwid2VicGFjazovL3JlY2lwZXMvLi9zcmMvanMvdmlldy9mb29kc1ZpZXcuanMiLCJ3ZWJwYWNrOi8vcmVjaXBlcy8uL3NyYy9qcy92aWV3L2xpc3RWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9lczZcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2luY2x1ZGVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTsiLCJyZXF1aXJlKFwiLi9saWIvbm9Db25mbGljdFwiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAnZGF0YSddO1xuICB2YXIgbWVyZ2VEZWVwUHJvcGVydGllc0tleXMgPSBbJ2hlYWRlcnMnLCAnYXV0aCcsICdwcm94eScsICdwYXJhbXMnXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAndGltZW91dE1lc3NhZ2UnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnZGVjb21wcmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAnbWF4Qm9keUxlbmd0aCcsICdtYXhSZWRpcmVjdHMnLCAndHJhbnNwb3J0JywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCcsICdyZXNwb25zZUVuY29kaW5nJ1xuICBdO1xuICB2YXIgZGlyZWN0TWVyZ2VLZXlzID0gWyd2YWxpZGF0ZVN0YXR1cyddO1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMuZm9yRWFjaCh2YWx1ZUZyb21Db25maWcyS2V5cywgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gobWVyZ2VEZWVwUHJvcGVydGllc0tleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHV0aWxzLmZvckVhY2goZGVmYXVsdFRvQ29uZmlnMktleXMsIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRpcmVjdE1lcmdlS2V5cywgZnVuY3Rpb24gbWVyZ2UocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKVxuICAgIC5jb25jYXQoZGlyZWN0TWVyZ2VLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMSlcbiAgICAuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gZmlsdGVyQXhpb3NLZXlzKGtleSkge1xuICAgICAgcmV0dXJuIGF4aW9zS2V5cy5pbmRleE9mKGtleSkgPT09IC0xO1xuICAgIH0pO1xuXG4gIHV0aWxzLmZvckVhY2gob3RoZXJLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gKHR5cGVvZiBwYXlsb2FkID09PSAnb2JqZWN0JykgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbVJpZ2h0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1MZWZ0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xMicgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciB3cyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xudmFyICRzbGljZSA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbik7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XG52YXIgZ2V0V2VhayA9IG1ldGEuZ2V0V2VhaztcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XG52YXIgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX01BUCwgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xuICAgIHZhciBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmIChpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKSB7XG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBXRUFLX1NFVCA9ICdXZWFrU2V0JztcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShXRUFLX1NFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBvbkZpbmFsbHkgPT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHRoaXMudGhlbihcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICB9IDogb25GaW5hbGx5LFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgfSA6IG9uRmluYWxseVxuICApO1xufSB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIGRlZmluZShHcCwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gIGRlZmluZShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgXCJjb25zdHJ1Y3RvclwiLCBHZW5lcmF0b3JGdW5jdGlvbik7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKFxuICAgIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLFxuICAgIHRvU3RyaW5nVGFnU3ltYm9sLFxuICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICApO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICBkZWZpbmUoR3AsIFwidG9TdHJpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIGluIG1vZGVybiBlbmdpbmVzXG4gIC8vIHdlIGNhbiBleHBsaWNpdGx5IGFjY2VzcyBnbG9iYWxUaGlzLiBJbiBvbGRlciBlbmdpbmVzIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIGdsb2JhbFRoaXMucmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbiAgfSBlbHNlIHtcbiAgICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xuICB9XG59XG4iLCIvKiBcbihUaGUgTUlUIExpY2Vuc2UpXG5Db3B5cmlnaHQgKGMpIDIwMTQtMjAyMSBIYWzDoXN6IMOBZMOhbSA8YWRhbUBhaW1mb3JtLmNvbT5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuKi9cblxuLy8gIFVuaXF1ZSBIZXhhdHJpZGVjaW1hbCBJRCBHZW5lcmF0b3Jcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAgRGVwZW5kZW5jaWVzXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbnZhciBwaWQgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5waWQgPyBwcm9jZXNzLnBpZC50b1N0cmluZygzNikgOiAnJyA7XG52YXIgYWRkcmVzcyA9ICcnO1xuaWYodHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18gIT09ICdmdW5jdGlvbicpe1xuICAgIHZhciBtYWMgPSAnJywgbmV0d29ya0ludGVyZmFjZXMgPSByZXF1aXJlKCdvcycpLm5ldHdvcmtJbnRlcmZhY2VzKCk7XG4gICAgbG9vcDpcbiAgICBmb3IobGV0IGludGVyZmFjZV9rZXkgaW4gbmV0d29ya0ludGVyZmFjZXMpe1xuICAgICAgICBjb25zdCBuZXR3b3JrSW50ZXJmYWNlID0gbmV0d29ya0ludGVyZmFjZXNbaW50ZXJmYWNlX2tleV07XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IG5ldHdvcmtJbnRlcmZhY2UubGVuZ3RoO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYobmV0d29ya0ludGVyZmFjZVtpXSAhPT0gdW5kZWZpbmVkICYmIG5ldHdvcmtJbnRlcmZhY2VbaV0ubWFjICYmIG5ldHdvcmtJbnRlcmZhY2VbaV0ubWFjICE9ICcwMDowMDowMDowMDowMDowMCcpe1xuICAgICAgICAgICAgICAgIG1hYyA9IG5ldHdvcmtJbnRlcmZhY2VbaV0ubWFjOyBicmVhayBsb29wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFkZHJlc3MgPSBtYWMgPyBwYXJzZUludChtYWMucmVwbGFjZSgvXFw6fFxcRCsvZ2ksICcnKSkudG9TdHJpbmcoMzYpIDogJycgO1xufSBcblxuLy8gIEV4cG9ydHNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxubW9kdWxlLmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24ocHJlZml4LCBzdWZmaXgpeyByZXR1cm4gKHByZWZpeCA/IHByZWZpeCA6ICcnKSArIGFkZHJlc3MgKyBwaWQgKyBub3coKS50b1N0cmluZygzNikgKyAoc3VmZml4ID8gc3VmZml4IDogJycpOyB9XG5tb2R1bGUuZXhwb3J0cy5wcm9jZXNzID0gZnVuY3Rpb24ocHJlZml4LCBzdWZmaXgpeyByZXR1cm4gKHByZWZpeCA/IHByZWZpeCA6ICcnKSArIHBpZCArIG5vdygpLnRvU3RyaW5nKDM2KSArIChzdWZmaXggPyBzdWZmaXggOiAnJyk7IH1cbm1vZHVsZS5leHBvcnRzLnRpbWUgICAgPSBmdW5jdGlvbihwcmVmaXgsIHN1ZmZpeCl7IHJldHVybiAocHJlZml4ID8gcHJlZml4IDogJycpICsgbm93KCkudG9TdHJpbmcoMzYpICsgKHN1ZmZpeCA/IHN1ZmZpeCA6ICcnKTsgfVxuXG4vLyAgSGVscGVyc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5mdW5jdGlvbiBub3coKXtcbiAgICB2YXIgdGltZSA9IERhdGUubm93KCk7XG4gICAgdmFyIGxhc3QgPSBub3cubGFzdCB8fCB0aW1lO1xuICAgIHJldHVybiBub3cubGFzdCA9IHRpbWUgPiBsYXN0ID8gdGltZSA6IGxhc3QgKyAxO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInJlcXVpcmUoXCJAYmFiZWwvcG9seWZpbGwvbm9Db25mbGljdFwiKTtcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoIHtcclxuICBjb25zdHJ1Y3RvcihxdWVyeSkge1xyXG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gIH1cclxuICBhc3luYyBkb1NlYXJjaCgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBheGlvcyhcclxuICAgICAgICBcImh0dHBzOi8vZm9ya2lmeS1hcGkuaGVyb2t1YXBwLmNvbS9hcGkvc2VhcmNoP3E9XCIgKyB0aGlzLnF1ZXJ5XHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0LmRhdGEucmVjaXBlcztcclxuICAgICAgcmV0dXJuIHRoaXMucmVzdWx0O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgYWxlcnQoXCLQkNGB0YPRg9C00LDQuyDQs9Cw0YDQu9Cw0LA6IFwiICsgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgRE9NZWxlbWVudHMgPSB7XHJcbiAgc2VhcmNoRm9ybTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZWFyY2hcIiksXHJcbiAgc2VhcmNoSW5wdXQ6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VhcmNoX19maWVsZFwiKSxcclxuICBzZWFyY2hSZXN1bHRMaXN0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc3VsdHNfX2xpc3RcIiksXHJcbiAgc2VhcmNoUmVzdWx0RGl2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc3VsdHNcIiksXHJcbiAgcGFnZUJ1dHRvbnM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVzdWx0c19fcGFnZXNcIiksXHJcbiAgcmVjaXBlRGl2OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlY2lwZVwiKSxcclxuICBzaG9wcGluZ0xpc3Q6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2hvcHBpbmdfX2xpc3RcIiksXHJcbiAgbGlrZUJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZWNpcGVfX2xvdmVcIiksXHJcbiAgbGlrZXNNZW51OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpa2VzX19maWVsZFwiKSxcclxuICBsaWtlc0xpc3Q6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGlrZXNfX2xpc3RcIiksXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZm9vZHMgPSBbXHJcbiAgXCJjYXJyb3RcIixcclxuICBcImJyb2Njb2xpXCIsXHJcbiAgXCJhc3BhcmFndXNcIixcclxuICBcImNhdWxpZmxvd2VyXCIsXHJcbiAgXCJjb3JuXCIsXHJcbiAgXCJjdWN1bWJlclwiLFxyXG4gIFwiZ3JlZW4gcGVwcGVyXCIsXHJcbiAgXCJsZXR0dWNlXCIsXHJcbiAgXCJtdXNocm9vbXNcIixcclxuICBcIm9uaW9uXCIsXHJcbiAgXCJwb3RhdG9cIixcclxuICBcInB1bXBraW5cIixcclxuICBcInJlZCBwZXBwZXJcIixcclxuICBcInRvbWF0b1wiLFxyXG4gIFwiYmVldHJvb3RcIixcclxuICBcImJydXNzZWwgc3Byb3V0c1wiLFxyXG4gIFwicGVhc1wiLFxyXG4gIFwienVjY2hpbmlcIixcclxuICBcInJhZGlzaFwiLFxyXG4gIFwic3dlZXQgcG90YXRvXCIsXHJcbiAgXCJhcnRpY2hva2VcIixcclxuICBcImxlZWtcIixcclxuICBcImNhYmJhZ2VcIixcclxuICBcImNlbGVyeVwiLFxyXG4gIFwiY2hpbGlcIixcclxuICBcImdhcmxpY1wiLFxyXG4gIFwiYmFzaWxcIixcclxuICBcImNvcmlhbmRlclwiLFxyXG4gIFwicGFyc2xleVwiLFxyXG4gIFwiZGlsbFwiLFxyXG4gIFwicm9zZW1hcnlcIixcclxuICBcIm9yZWdhbm9cIixcclxuICBcImNpbm5hbW9uXCIsXHJcbiAgXCJzYWZmcm9uXCIsXHJcbiAgXCJncmVlbiBiZWFuXCIsXHJcbiAgXCJiZWFuXCIsXHJcbiAgXCJjaGlja3BlYVwiLFxyXG4gIFwibGVudGlsXCIsXHJcbiAgXCJhcHBsZVwiLFxyXG4gIFwiYXByaWNvdFwiLFxyXG4gIFwiYXZvY2Fkb1wiLFxyXG4gIFwiYmFuYW5hXCIsXHJcbiAgXCJibGFja2JlcnJ5XCIsXHJcbiAgXCJibGFja2N1cnJhbnRcIixcclxuICBcImJsdWViZXJyeVwiLFxyXG4gIFwiYm95c2VuYmVycnlcIixcclxuICBcImNoZXJyeVwiLFxyXG4gIFwiY29jb251dFwiLFxyXG4gIFwiZmlnXCIsXHJcbiAgXCJncmFwZVwiLFxyXG4gIFwiZ3JhcGVmcnVpdFwiLFxyXG4gIFwia2l3aWZydWl0XCIsXHJcbiAgXCJsZW1vblwiLFxyXG4gIFwibGltZVwiLFxyXG4gIFwibHljaGVlXCIsXHJcbiAgXCJtYW5kYXJpblwiLFxyXG4gIFwibWFuZ29cIixcclxuICBcIm1lbG9uXCIsXHJcbiAgXCJuZWN0YXJpbmVcIixcclxuICBcIm9yYW5nZVwiLFxyXG4gIFwicGFwYXlhXCIsXHJcbiAgXCJwYXNzaW9uIGZydWl0XCIsXHJcbiAgXCJwZWFjaFwiLFxyXG4gIFwicGVhclwiLFxyXG4gIFwicGluZWFwcGxlXCIsXHJcbiAgXCJwbHVtXCIsXHJcbiAgXCJwb21lZ3JhbmF0ZVwiLFxyXG4gIFwicXVpbmNlXCIsXHJcbiAgXCJyYXNwYmVycnlcIixcclxuICBcInN0cmF3YmVycnlcIixcclxuICBcIndhdGVybWVsb25cIixcclxuICBcInNhbGFkXCIsXHJcbiAgXCJwaXp6YVwiLFxyXG4gIFwicGFzdGFcIixcclxuICBcInBvcGNvcm5cIixcclxuICBcImxvYnN0ZXJcIixcclxuICBcInN0ZWFrXCIsXHJcbiAgXCJiYnFcIixcclxuICBcInB1ZGRpbmdcIixcclxuICBcImhhbWJ1cmdlclwiLFxyXG4gIFwicGllXCIsXHJcbiAgXCJjYWtlXCIsXHJcbiAgXCJzYXVzYWdlXCIsXHJcbiAgXCJ0YWNvc1wiLFxyXG4gIFwia2ViYWJcIixcclxuICBcInBvdXRpbmVcIixcclxuICBcInNlYWZvb2RcIixcclxuICBcImNoaXBzXCIsXHJcbiAgXCJmcmllc1wiLFxyXG4gIFwibWFzYWxhXCIsXHJcbiAgXCJwYWVsbGFcIixcclxuICBcInNvbSB0YW1cIixcclxuICBcImNoaWNrZW5cIixcclxuICBcInRvYXN0XCIsXHJcbiAgXCJtYXJ6aXBhblwiLFxyXG4gIFwidG9mdVwiLFxyXG4gIFwia2V0Y2h1cFwiLFxyXG4gIFwiaHVtbXVzXCIsXHJcbiAgXCJjaGlsaVwiLFxyXG4gIFwibWFwbGUgc3lydXBcIixcclxuICBcInBhcm1hIGhhbVwiLFxyXG4gIFwiZmFqaXRhc1wiLFxyXG4gIFwiY2hhbXBcIixcclxuICBcImxhc2FnbmFcIixcclxuICBcInBva2VcIixcclxuICBcImNob2NvbGF0ZVwiLFxyXG4gIFwiY3JvaXNzYW50XCIsXHJcbiAgXCJhcmVwYXNcIixcclxuICBcImJ1bm55IGNob3dcIixcclxuICBcInBpZXJvZ2lcIixcclxuICBcImRvbnV0c1wiLFxyXG4gIFwicmVuZGFuZ1wiLFxyXG4gIFwic3VzaGlcIixcclxuICBcImljZSBjcmVhbVwiLFxyXG4gIFwiZHVja1wiLFxyXG4gIFwiY3VycnlcIixcclxuICBcImJlZWZcIixcclxuICBcImdvYXRcIixcclxuICBcImxhbWJcIixcclxuICBcInR1cmtleVwiLFxyXG4gIFwicG9ya1wiLFxyXG4gIFwiZmlzaFwiLFxyXG4gIFwiY3JhYlwiLFxyXG4gIFwiYmFjb25cIixcclxuICBcImhhbVwiLFxyXG4gIFwicGVwcGVyb25pXCIsXHJcbiAgXCJzYWxhbWlcIixcclxuICBcInJpYnNcIixcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBlbGVtZW50U3RyaW5ncyA9IHtcclxuICBsb2FkZXI6IFwibG9hZGVyXCIsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyTG9hZGVyID0gKHBhcmVudCkgPT4ge1xyXG4gIGNvbnN0IGxvYWRlciA9IGBcclxuICAgIDxkaXYgY2xhc3M9XCIke2VsZW1lbnRTdHJpbmdzLmxvYWRlcn1cIj5cclxuICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICA8dXNlIGhyZWY9XCJpbWcvaWNvbnMuc3ZnI2ljb24tY3dcIj48L3VzZT5cclxuICAgICAgICA8L3N2Zz5cclxuICAgIDwvZGl2PmA7XHJcbiAgcGFyZW50Lmluc2VydEFkamFjZW50SFRNTChcImFmdGVyYmVnaW5cIiwgbG9hZGVyKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhckxvYWRlciA9ICgpID0+IHtcclxuICBjb25zdCBsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtlbGVtZW50U3RyaW5ncy5sb2FkZXJ9YCk7XHJcbiAgaWYgKGxvYWRlcikgbG9hZGVyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQobG9hZGVyKTtcclxufTtcclxuIiwiaW1wb3J0IHsgRE9NZWxlbWVudHMgfSBmcm9tIFwiLi9iYXNlXCI7XHJcbmNvbnN0IHJlbmRlclJlY2lwZSA9IChyZWNpcGUpID0+IHtcclxuICBsZXQgbWFya3VwID0gYFxyXG4gIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInJlc3VsdHNfX2xpbmtcIiBocmVmPVwiIyR7cmVjaXBlLnJlY2lwZV9pZH1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz1cInJlc3VsdHNfX2ZpZ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3JlY2lwZS5pbWFnZV91cmx9XCIgYWx0PVwiVGVzdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlc3VsdHNfX2RhdGFcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cInJlc3VsdHNfX25hbWVcIj4ke3JlY2lwZS50aXRsZX08L2g0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJyZXN1bHRzX19hdXRob3JcIj4ke3JlY2lwZS5wdWJsaXNoZXJ9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPmA7XHJcbiAgRE9NZWxlbWVudHMuc2VhcmNoUmVzdWx0TGlzdC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgbWFya3VwKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhclNlYXJjaFF1ZXJ5ID0gKCkgPT4ge1xyXG4gIERPTWVsZW1lbnRzLnNlYXJjaElucHV0LnZhbHVlID0gXCJcIjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhclNlYXJjaFJlc3VsdCA9ICgpID0+IHtcclxuICBET01lbGVtZW50cy5zZWFyY2hSZXN1bHRMaXN0LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgRE9NZWxlbWVudHMucGFnZUJ1dHRvbnMuaW5uZXJIVE1MID0gXCJcIjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRJbnB1dCA9ICgpID0+IERPTWVsZW1lbnRzLnNlYXJjaElucHV0LnZhbHVlO1xyXG5cclxuY29uc3QgY3JlYXRlQnV0dG9uID0gKHBhZ2UsIHR5cGUsIGRpcmVjdGlvbikgPT4gYFxyXG48YnV0dG9uIGNsYXNzPVwiYnRuLWlubGluZSByZXN1bHRzX19idG4tLSR7dHlwZX1cIiBkYXRhLWdvdG89XCIke3BhZ2V9XCI+XHJcbjxzdmcgY2xhc3M9XCJzZWFyY2hfX2ljb25cIj5cclxuICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi10cmlhbmdsZS0ke2RpcmVjdGlvbn1cIj48L3VzZT5cclxuPC9zdmc+XHJcbjxzcGFuPtCl0YPRg9C00LDRgSAke3BhZ2V9PC9zcGFuPlxyXG48L2J1dHRvbj5gO1xyXG5cclxuY29uc3QgcmVuZGVyQnV0dG9ucyA9IChjdXJyZW50UGFnZSwgdG90YWxQYWdlcykgPT4ge1xyXG4gIGxldCBidXR0b25IVE1MO1xyXG4gIGlmICh0b3RhbFBhZ2VzID09IDEpIHtcclxuICB9IGVsc2UgaWYgKGN1cnJlbnRQYWdlID09IDEgJiYgdG90YWxQYWdlcyA+IDEpIHtcclxuICAgIGJ1dHRvbkhUTUwgPSBjcmVhdGVCdXR0b24oY3VycmVudFBhZ2UgKyAxLCBcIm5leHRcIiwgXCJyaWdodFwiKTtcclxuICB9IGVsc2UgaWYgKGN1cnJlbnRQYWdlID09IHRvdGFsUGFnZXMpIHtcclxuICAgIGJ1dHRvbkhUTUwgPSBjcmVhdGVCdXR0b24oY3VycmVudFBhZ2UgLSAxLCBcInByZXZcIiwgXCJsZWZ0XCIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBidXR0b25IVE1MID0gY3JlYXRlQnV0dG9uKGN1cnJlbnRQYWdlIC0gMSwgXCJwcmV2XCIsIFwibGVmdFwiKTtcclxuICAgIGJ1dHRvbkhUTUwgKz0gY3JlYXRlQnV0dG9uKGN1cnJlbnRQYWdlICsgMSwgXCJuZXh0XCIsIFwicmlnaHRcIik7XHJcbiAgfVxyXG5cclxuICBET01lbGVtZW50cy5wYWdlQnV0dG9ucy5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIGJ1dHRvbkhUTUwpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlclJlY2lwZXMgPSAocmVjaXBlLCBjdXJyZW50UGFnZSA9IDEsIHJlc1BlclBhZ2UgPSAxMikgPT4ge1xyXG4gIGNvbnN0IHBhZ2VTdGFydCA9IChjdXJyZW50UGFnZSAtIDEpICogcmVzUGVyUGFnZTtcclxuICBjb25zdCBwYWdlRW5kID0gY3VycmVudFBhZ2UgKiByZXNQZXJQYWdlO1xyXG4gIHJlY2lwZS5zbGljZShwYWdlU3RhcnQsIHBhZ2VFbmQpLmZvckVhY2gocmVuZGVyUmVjaXBlKTtcclxuXHJcbiAgY29uc3QgdG90YWxQYWdlcyA9IE1hdGguY2VpbChyZWNpcGUubGVuZ3RoIC8gcmVzUGVyUGFnZSk7XHJcbiAgcmVuZGVyQnV0dG9ucyhjdXJyZW50UGFnZSwgdG90YWxQYWdlcyk7XHJcbn07XHJcbiIsImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlY2lwZSB7XHJcbiAgY29uc3RydWN0b3IoaWQpIHtcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFJlY2lwZSgpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF4aW9zKFxyXG4gICAgICBcImh0dHBzOi8vZm9ya2lmeS1hcGkuaGVyb2t1YXBwLmNvbS9hcGkvZ2V0P3JJZD1cIiArIHRoaXMuaWRcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5wdWJsaXNoZXIgPSByZXN1bHQuZGF0YS5yZWNpcGUucHVibGlzaGVyO1xyXG4gICAgdGhpcy5pbmdyZWRpZW50cyA9IHJlc3VsdC5kYXRhLnJlY2lwZS5pbmdyZWRpZW50cztcclxuICAgIHRoaXMuc291cmNlX3VybCA9IHJlc3VsdC5kYXRhLnJlY2lwZS5zb3VyY2VfdXJsO1xyXG4gICAgdGhpcy5pbWFnZV91cmwgPSByZXN1bHQuZGF0YS5yZWNpcGUuaW1hZ2VfdXJsO1xyXG4gICAgdGhpcy5wdWJsaXNoZXJfdXJsID0gcmVzdWx0LmRhdGEucmVjaXBlLnB1Ymxpc2hlcl91cmw7XHJcbiAgICB0aGlzLnRpdGxlID0gcmVzdWx0LmRhdGEucmVjaXBlLnRpdGxlO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdW5pcWlkIGZyb20gXCJ1bmlxaWRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3Qge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5pdGVtcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICBsZXQgbmV3SXRlbSA9IHtcclxuICAgICAgaWQ6IHVuaXFpZCgpLFxyXG4gICAgICBpdGVtLFxyXG4gICAgfTtcclxuICAgIHRoaXMuaXRlbXMucHVzaChuZXdJdGVtKTtcclxuXHJcbiAgICByZXR1cm4gbmV3SXRlbTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUl0ZW0oaWQpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoKGVsKSA9PiBlbC5pZCA9PT0gaWQpO1xyXG4gICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBET01lbGVtZW50cyB9IGZyb20gXCIuL2Jhc2VcIjtcclxuXHJcbmNvbnN0IHJlbmRlck5haXJsYWdhID0gKG9ydHMpID0+IGA8bGkgY2xhc3M9XCJyZWNpcGVfX2l0ZW1cIj5cclxuICAgICAgICA8c3ZnIGNsYXNzPVwicmVjaXBlX19pY29uXCI+XHJcbiAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1jaGVja1wiPjwvdXNlPlxyXG4gICAgICAgIDwvc3ZnPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZWNpcGVfX2luZ3JlZGllbnRcIj5cclxuICAgICAgICAgICAgJHtvcnRzfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9saT5cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBhY3RpdmVSZWNpcGUgPSAoaWQpID0+IHtcclxuICBsZXQgYXJyYXkgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucmVzdWx0c19fbGlua1wiKSk7XHJcbiAgYXJyYXkuZm9yRWFjaCgoZWwpID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJyZXN1bHRzX19saW5rLS1hY3RpdmVcIikpO1xyXG4gIGNvbnN0IERvbU9iaiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5yZXN1bHRzX19saW5rW2hyZWYqPVwiIyR7aWR9XCJdYCk7XHJcbiAgaWYgKERvbU9iaikgRG9tT2JqLmNsYXNzTGlzdC5hZGQoXCJyZXN1bHRzX19saW5rLS1hY3RpdmVcIik7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJSZWNpcGUgPSAoKSA9PiB7XHJcbiAgRE9NZWxlbWVudHMucmVjaXBlRGl2LmlubmVySFRNTCA9IFwiXCI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyUmVjaXBlID0gKHJlY2lwZSwgaXNMaWtlZCkgPT4ge1xyXG4gIGNvbnN0IGh0bWwgPSBgXHJcbiAgPGZpZ3VyZSBjbGFzcz1cInJlY2lwZV9fZmlnXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7cmVjaXBlLmltYWdlX3VybH1cIiBhbHQ9XCIke1xyXG4gICAgcmVjaXBlLnRpdGxlXHJcbiAgfVwiIGNsYXNzPVwicmVjaXBlX19pbWdcIj5cclxuICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cInJlY2lwZV9fdGl0bGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke3JlY2lwZS50aXRsZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2gxPlxyXG4gICAgICAgICAgICA8L2ZpZ3VyZT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9fZGV0YWlsc1wiPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVjaXBlX19sb3ZlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cImhlYWRlcl9fbGlrZXNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLWhlYXJ0JHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpc0xpa2VkID8gXCJcIiA6IFwiLW91dGxpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVwiPjwvdXNlPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudHNcIj5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cInJlY2lwZV9faW5ncmVkaWVudC1saXN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgJHtyZWNpcGUuaW5ncmVkaWVudHNcclxuICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKGVsKSA9PiByZW5kZXJOYWlybGFnYShlbCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAuam9pbihcIiBcIil9XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0bi1zbWFsbCByZWNpcGVfX2J0blwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzZWFyY2hfX2ljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLXNob3BwaW5nLWNhcnRcIj48L3VzZT5cclxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj7QodCQ0JPQodCQ0J3QlCDQpdCY0JnQpTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZWNpcGVfX2RpcmVjdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cImhlYWRpbmctMlwiPtCl0Y3RgNGF0Y3QvSDQsdGN0LvRgtCz0Y3RhSDQstGNPC9oMj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicmVjaXBlX19kaXJlY3Rpb25zLXRleHRcIj5cclxuICAgICAgICAgICAgICAgICAgICDQltC+0YDRi9CzINCx0Y3Qu9GC0LPRjdC2INC+0YDRg9GD0LvRgdCw0L1cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlY2lwZV9fYnlcIj4ke1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmVjaXBlLnB1Ymxpc2hlclxyXG4gICAgICAgICAgICAgICAgICAgIH08L3NwYW4+LiDQnNCw0L3QsNC5INCy0Y3QsSDRgdCw0LnRgtCw0LDRgSDQttC+0YDRi9C9INC30LDQsNCy0YDRi9CzINCw0LLQvdCwINGD0YNcclxuICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiYnRuLXNtYWxsIHJlY2lwZV9fYnRuXCIgaHJlZj1cIiR7XHJcbiAgICAgICAgICAgICAgICAgIHJlY2lwZS5zb3VyY2VfdXJsXHJcbiAgICAgICAgICAgICAgICB9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+0JfQkNCQ0JLQkNCgINKu0JfQrdClPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJzZWFyY2hfX2ljb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHVzZSBocmVmPVwiaW1nL2ljb25zLnN2ZyNpY29uLXRyaWFuZ2xlLXJpZ2h0XCI+PC91c2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gIGA7XHJcbiAgRE9NZWxlbWVudHMucmVjaXBlRGl2Lmluc2VydEFkamFjZW50SFRNTChcImFmdGVyYmVnaW5cIiwgaHRtbCk7XHJcbn07XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpa2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yZWFkTG9jYWxTdG9yYWdlKCk7XHJcbiAgICBpZiAoIXRoaXMubGlrZXMpIHRoaXMubGlrZXMgPSBbXTtcclxuICB9XHJcbiAgYWRkTGlrZShpZCwgdGl0bGUsIHB1Ymxpc2hlciwgaW1nKSB7XHJcbiAgICBjb25zdCBsaWtlID0geyBpZCwgdGl0bGUsIHB1Ymxpc2hlciwgaW1nIH07XHJcbiAgICB0aGlzLmxpa2VzLnB1c2gobGlrZSk7XHJcbiAgICB0aGlzLnNhdmVEYXRhVG9Mb2NhbFN0b3JhZ2UoKTtcclxuICAgIHJldHVybiBsaWtlO1xyXG4gIH1cclxuICBkZWxldGVMaWtlKGlkKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMubGlrZXMuZmluZEluZGV4KChlbCkgPT4gKGVsLmlkID0gaWQpKTtcclxuICAgIHRoaXMubGlrZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIHRoaXMuc2F2ZURhdGFUb0xvY2FsU3RvcmFnZSgpO1xyXG4gIH1cclxuXHJcbiAgaXNMaWtlZChpZCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGlrZXMuZmluZEluZGV4KChlbCkgPT4gZWwuaWQgPT0gaWQpICE9PSAtMTtcclxuICB9XHJcblxyXG4gIGdldE51bWJlck9mTGlrZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5saWtlcy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBzYXZlRGF0YVRvTG9jYWxTdG9yYWdlKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJsaWtlc1wiLCBKU09OLnN0cmluZ2lmeSh0aGlzLmxpa2VzKSk7XHJcbiAgfVxyXG5cclxuICByZWFkTG9jYWxTdG9yYWdlKCkge1xyXG4gICAgdGhpcy5saWtlcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsaWtlc1wiKSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IERPTWVsZW1lbnRzIH0gZnJvbSBcIi4vYmFzZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZUxpa2VCdG4gPSAoaXNMaWtlZCkgPT4ge1xyXG4gIGNvbnN0IGljb25TdHJpbmcgPSBpc0xpa2VkID8gXCJpY29uLWhlYXJ0XCIgOiBcImljb24taGVhcnQtb3V0bGluZWRcIjtcclxuICBkb2N1bWVudFxyXG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCIucmVjaXBlX19sb3ZlIHVzZVwiKVxyXG4gICAgLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgYGltZy9pY29ucy5zdmcjJHtpY29uU3RyaW5nfWApO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZUxpa2VNZW51ID0gKG51bWJlck9mTGlrZXMpID0+IHtcclxuICBET01lbGVtZW50cy5saWtlc01lbnUuc3R5bGUudmlzaWJpbGl0eSA9XHJcbiAgICBudW1iZXJPZkxpa2VzID4gMCA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZW5kZXJMaWtlcyA9IChuZXdMaWtlKSA9PiB7XHJcbiAgY29uc3QgbGxfaHRtbCA9IGA8bGk+XHJcbiAgPGEgY2xhc3M9XCJsaWtlc19fbGlua1wiIGhyZWY9XCIjJHtuZXdMaWtlLmlkfVwiPlxyXG4gICAgICA8ZmlndXJlIGNsYXNzPVwibGlrZXNfX2ZpZ1wiPlxyXG4gICAgICAgICAgPGltZyBzcmM9XCIke25ld0xpa2UuaW1nfVwiIGFsdD1cIlRlc3RcIj5cclxuICAgICAgPC9maWd1cmU+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJsaWtlc19fZGF0YVwiPlxyXG4gICAgICAgICAgPGg0IGNsYXNzPVwibGlrZXNfX25hbWVcIj4ke25ld0xpa2UudGl0bGV9PC9oND5cclxuICAgICAgICAgIDxwIGNsYXNzPVwibGlrZXNfX2F1dGhvclwiPiR7bmV3TGlrZS5wdWJsaXNoZXJ9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICA8L2E+XHJcbjwvbGk+YDtcclxuICBET01lbGVtZW50cy5saWtlc0xpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIGxsX2h0bWwpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUxpa2UgPSAoaWQpID0+IHtcclxuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgIGAubGlrZXNfX2xpbmtbaHJlZio9XCIke2lkfVwiXWBcclxuICApLnBhcmVudEVsZW1lbnQ7XHJcbiAgaWYgKGVsZW1lbnQpIGVsZW1lbnQucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50KTtcclxufTtcclxuIiwiaW1wb3J0IFNlYXJjaCBmcm9tIFwiLi9tb2RlbC9TZWFyY2hcIjtcclxuaW1wb3J0IHsgRE9NZWxlbWVudHMsIHJlbmRlckxvYWRlciwgY2xlYXJMb2FkZXIgfSBmcm9tIFwiLi92aWV3L2Jhc2VcIjtcclxuaW1wb3J0ICogYXMgc2VhcmNoVmlldyBmcm9tIFwiLi92aWV3L3NlYXJjaFZpZXdcIjtcclxuaW1wb3J0IFJlY2lwZSBmcm9tIFwiLi9tb2RlbC9SZWNpcGVcIjtcclxuaW1wb3J0IExpc3QgZnJvbSBcIi4vbW9kZWwvTGlzdFwiO1xyXG5pbXBvcnQgKiBhcyBsaXN0VmlldyBmcm9tIFwiLi92aWV3L2xpc3RWaWV3XCI7XHJcbmltcG9ydCB7IHJlbmRlclJlY2lwZSwgY2xlYXJSZWNpcGUsIGFjdGl2ZVJlY2lwZSB9IGZyb20gXCIuL3ZpZXcvcmVjaXBlVmlld1wiO1xyXG5pbXBvcnQgTGlrZSBmcm9tIFwiLi9tb2RlbC9MaWtlXCI7XHJcbmltcG9ydCAqIGFzIGxpa2VzVmlldyBmcm9tIFwiLi92aWV3L2xpa2VWaWV3XCI7XHJcbmltcG9ydCAqIGFzIGZvb2RzVmlldyBmcm9tIFwiLi92aWV3L2Zvb2RzVmlld1wiO1xyXG5cclxuY29uc3Qgc3RhdGUgPSB7fTtcclxuZm9vZHNWaWV3LnJlbmRlckZvb2RNZW51KCk7XHJcblxyXG5jb25zdCBjb250cm9sU2VhcmNoID0gYXN5bmMgKHF1ZXJ5KSA9PiB7XHJcbiAgLy/QktGN0LHRjdGN0YEg0YXQsNC50LvRgtGL0L0g0YLSr9C70YXSr9Kv0YAg0q/Qs9C40LnQsyDQs9Cw0YDQs9Cw0LYg0LDQstC90LAuXHJcblxyXG4gIGlmIChxdWVyeSkge1xyXG4gICAgLy8g0YjQuNC90Y3RjdGAINGF0LDQudC70YLRi9C9INC+0LHRjNC10LrRgtGL0LMg0q/Sr9GB0LPRjdC90Y1cclxuICAgIHN0YXRlLnNlYXJjaCA9IG5ldyBTZWFyY2gocXVlcnkpO1xyXG5cclxuICAgIC8vINGF0LDQudC70YIg0YXQuNC50YXRjdC0INC30L7RgNC40YPQu9C2INC00Y3Qu9Cz0Y3RhtC40LnQvSDRhdGN0YDRjdCz0LvRjdCz0YfQuNC50L0g0LjQvdGC0LXRgNGE0Y3QudGB0LjQudCzINCx0Y3Qu9C00Y3QvdGNLlxyXG4gICAgc2VhcmNoVmlldy5jbGVhclNlYXJjaFF1ZXJ5KCk7XHJcbiAgICBzZWFyY2hWaWV3LmNsZWFyU2VhcmNoUmVzdWx0KCk7XHJcbiAgICByZW5kZXJMb2FkZXIoRE9NZWxlbWVudHMuc2VhcmNoUmVzdWx0RGl2KTtcclxuXHJcbiAgICAvLyDRhdCw0LnQu9GC0YvQsyDQs9Kv0LnRhtGN0YLQs9GN0L3RjVxyXG4gICAgYXdhaXQgc3RhdGUuc2VhcmNoLmRvU2VhcmNoKCk7XHJcblxyXG4gICAgLy/RhdCw0LnQu9GC0YvQvSDSr9GAINC00q/QvdCzINC00Y3Qu9Cz0Y3RhtGN0L3QtCDSr9C30q/Sr9C70L3RjS5cclxuICAgIGNsZWFyTG9hZGVyKCk7XHJcblxyXG4gICAgaWYgKHN0YXRlLnNlYXJjaC5yZXN1bHQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIERPTWVsZW1lbnRzLnNlYXJjaElucHV0LnZhbHVlID0gXCJcIjtcclxuICAgICAgRE9NZWxlbWVudHMuc2VhcmNoSW5wdXQucGxhY2Vob2xkZXIgPSBcItCl0LDQudC70YIg0LjQu9GN0YDRhtCz0q/QuS5cIjtcclxuICAgIH0gZWxzZSBzZWFyY2hWaWV3LnJlbmRlclJlY2lwZXMoc3RhdGUuc2VhcmNoLnJlc3VsdCk7XHJcbiAgfVxyXG59O1xyXG5cclxuRE9NZWxlbWVudHMuc2VhcmNoRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGxldCBzZWFyY2hCeVdvcmQgPSBzZWFyY2hWaWV3LmdldElucHV0KCk7XHJcbiAgY29udHJvbFNlYXJjaChzZWFyY2hCeVdvcmQpO1xyXG59KTtcclxuXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9vZE1lbnVcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGxldCBzZWFyY2hCeUJ1dHRvbiA9IGUudGFyZ2V0LmNsb3Nlc3QoXCIuZm9vZC1tZW51LWJ1dHRvblwiKS5pZDtcclxuICBpZiAoc2VhcmNoQnlCdXR0b24uaW5jbHVkZXMoXCItXCIpKVxyXG4gICAgc2VhcmNoQnlCdXR0b24gPSBzZWFyY2hCeUJ1dHRvbi5yZXBsYWNlKFwiLVwiLCBcIiBcIik7XHJcbiAgY29udHJvbFNlYXJjaChzZWFyY2hCeUJ1dHRvbik7XHJcbn0pO1xyXG5cclxuRE9NZWxlbWVudHMucGFnZUJ1dHRvbnMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgY29uc3QgYnRuID0gZS50YXJnZXQuY2xvc2VzdChcIi5idG4taW5saW5lXCIpO1xyXG4gIGlmIChidG4pIHtcclxuICAgIGNvbnN0IGdvdG8gPSBwYXJzZUludChidG4uZGF0YXNldC5nb3RvKTtcclxuICAgIHNlYXJjaFZpZXcuY2xlYXJTZWFyY2hSZXN1bHQoKTtcclxuICAgIHNlYXJjaFZpZXcucmVuZGVyUmVjaXBlcyhzdGF0ZS5zZWFyY2gucmVzdWx0LCBnb3RvKTtcclxuICB9XHJcbn0pO1xyXG5cclxuY29uc3QgY29udHJvbFJlY2lwZSA9IGFzeW5jICgpID0+IHtcclxuICAvLyBVUkwt0Y3RjdGBIElELdCzINGB0LDQu9Cz0LDQtiDQsNCy0L3QsFxyXG4gIGNvbnN0IGlkID0gd2luZG93LmxvY2F0aW9uLmhhc2gucmVwbGFjZShcIiNcIiwgXCJcIik7XHJcblxyXG4gIGlmIChpZCkge1xyXG4gICAgLy8g0JbQvtGA0YvQvSDQvNC+0LTQtdC70LjQudCzINKv0q/RgdCz0Y3QtiDTqdCz0L3TqVxyXG4gICAgc3RhdGUucmVjaXBlID0gbmV3IFJlY2lwZShpZCk7XHJcblxyXG4gICAgLy8gVUkg0LTRjdC70LPRjdGG0LjQudCzINCx0Y3Qu9GC0LPRjdC90Y1cclxuICAgIGNsZWFyUmVjaXBlKCk7XHJcbiAgICByZW5kZXJMb2FkZXIoRE9NZWxlbWVudHMucmVjaXBlRGl2KTtcclxuICAgIGFjdGl2ZVJlY2lwZShpZCk7XHJcblxyXG4gICAgLy8g0JbQvtGA0L7QviDRgtCw0YLQsNC2INCw0LLRh9C40YDQvdCwXHJcbiAgICBhd2FpdCBzdGF0ZS5yZWNpcGUuZ2V0UmVjaXBlKCk7XHJcblxyXG4gICAgLy8g0JbQvtGA0L7QviDQtNGN0LvQs9GN0YbRjdC90LQg0LPQsNGA0LPQsNC90LAuXHJcbiAgICBjbGVhckxvYWRlcigpO1xyXG4gICAgcmVuZGVyUmVjaXBlKHN0YXRlLnJlY2lwZSwgc3RhdGUubGlrZXMuaXNMaWtlZChpZCkpO1xyXG4gIH1cclxufTtcclxuXHJcbltcImhhc2hjaGFuZ2VcIiwgXCJsb2FkXCJdLmZvckVhY2goKGUpID0+XHJcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZSwgY29udHJvbFJlY2lwZSlcclxuKTtcclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcclxuICBpZiAoIXN0YXRlLmxpa2VzKSBzdGF0ZS5saWtlcyA9IG5ldyBMaWtlKCk7XHJcbiAgbGlrZXNWaWV3LnRvZ2dsZUxpa2VNZW51KHN0YXRlLmxpa2VzLmdldE51bWJlck9mTGlrZXMoKSk7XHJcbiAgc3RhdGUubGlrZXMubGlrZXMuZm9yRWFjaCgobCkgPT4ge1xyXG4gICAgbGlrZXNWaWV3LnJlbmRlckxpa2VzKGwpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmNvbnN0IGNvbnRyb2xMaXN0ID0gKCkgPT4ge1xyXG4gIHN0YXRlLmxpc3QgPSBuZXcgTGlzdCgpO1xyXG4gIHN0YXRlLnJlY2lwZS5pbmdyZWRpZW50cy5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICBjb25zdCBpdGVtID0gc3RhdGUubGlzdC5hZGRJdGVtKG4pO1xyXG4gICAgbGlzdFZpZXcucmVuZGVySXRlbShpdGVtKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGNvbnRyb2xMaWtlID0gKCkgPT4ge1xyXG4gIGlmICghc3RhdGUubGlrZXMpIHN0YXRlLmxpa2VzID0gbmV3IExpa2UoKTtcclxuICBjb25zdCBjdXJyZW50UmVjaXBlID0gc3RhdGUucmVjaXBlLmlkO1xyXG4gIGlmIChzdGF0ZS5saWtlcy5pc0xpa2VkKGN1cnJlbnRSZWNpcGUpKSB7XHJcbiAgICBzdGF0ZS5saWtlcy5kZWxldGVMaWtlKGN1cnJlbnRSZWNpcGUpO1xyXG4gICAgbGlrZXNWaWV3LmRlbGV0ZUxpa2UoY3VycmVudFJlY2lwZSk7XHJcbiAgICBsaWtlc1ZpZXcudG9nZ2xlTGlrZUJ0bihmYWxzZSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IG5ld0xpa2UgPSBzdGF0ZS5saWtlcy5hZGRMaWtlKFxyXG4gICAgICBjdXJyZW50UmVjaXBlLFxyXG4gICAgICBzdGF0ZS5yZWNpcGUudGl0bGUsXHJcbiAgICAgIHN0YXRlLnJlY2lwZS5wdWJsaXNoZXIsXHJcbiAgICAgIHN0YXRlLnJlY2lwZS5pbWFnZV91cmxcclxuICAgICk7XHJcbiAgICBsaWtlc1ZpZXcucmVuZGVyTGlrZXMobmV3TGlrZSk7XHJcbiAgICBsaWtlc1ZpZXcudG9nZ2xlTGlrZUJ0bih0cnVlKTtcclxuICB9XHJcbiAgbGlrZXNWaWV3LnRvZ2dsZUxpa2VNZW51KHN0YXRlLmxpa2VzLmdldE51bWJlck9mTGlrZXMoKSk7XHJcbn07XHJcblxyXG5ET01lbGVtZW50cy5yZWNpcGVEaXYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgaWYgKGUudGFyZ2V0Lm1hdGNoZXMoXCIucmVjaXBlX19idG4sIC5yZWNpcGVfX2J0biAqXCIpKSB7XHJcbiAgICBsaXN0Vmlldy5jbGVhckl0ZW1zKCk7XHJcbiAgICBjb250cm9sTGlzdCgpO1xyXG4gIH0gZWxzZSBpZiAoZS50YXJnZXQubWF0Y2hlcyhcIi5yZWNpcGVfX2xvdmUsIC5yZWNpcGVfX2xvdmUgKlwiKSkge1xyXG4gICAgY29udHJvbExpa2UoKTtcclxuICB9XHJcbn0pO1xyXG5cclxuRE9NZWxlbWVudHMuc2hvcHBpbmdMaXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gIGNvbnN0IGlkID0gZS50YXJnZXQuY2xvc2VzdChcIi5zaG9wcGluZ19faXRlbVwiKS5kYXRhc2V0Lml0ZW1pZDtcclxuICBpZiAoXHJcbiAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5kYXRhc2V0Lml0ZW1pZCA9PSBpZCB8fFxyXG4gICAgZS50YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmRhdGFzZXQuaXRlbWlkID09IGlkXHJcbiAgKSB7XHJcbiAgICBzdGF0ZS5saXN0LmRlbGV0ZUl0ZW0oaWQpO1xyXG4gICAgbGlzdFZpZXcuZGVsZXRlSXRlbShpZCk7XHJcbiAgfVxyXG59KTtcclxuIiwiaW1wb3J0IHsgZm9vZHMgfSBmcm9tIFwiLi9iYXNlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcmVuZGVyRm9vZE1lbnUgPSAoKSA9PiB7XHJcbiAgZm9vZHMuZm9yRWFjaCgoZSkgPT4ge1xyXG4gICAgbGV0IGVsZW1lbnRJZDtcclxuICAgIGUuaW5jbHVkZXMoXCIgXCIpID8gKGVsZW1lbnRJZCA9IGUucmVwbGFjZShcIiBcIiwgXCItXCIpKSA6IChlbGVtZW50SWQgPSBlKTtcclxuICAgIGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmZvb2RNZW51XCIpXHJcbiAgICAgIC5pbnNlcnRBZGphY2VudEhUTUwoXHJcbiAgICAgICAgXCJiZWZvcmVlbmRcIixcclxuICAgICAgICBgPGJ1dHRvbiBjbGFzcz1cImJ0bi1zbWFsbCBmb29kLW1lbnUtYnV0dG9uXCIgaWQ9JHtlbGVtZW50SWR9PiR7ZX08L2J1dHRvbj5gXHJcbiAgICAgICk7XHJcbiAgfSk7XHJcbn07XHJcbiIsImltcG9ydCB7IERPTWVsZW1lbnRzIH0gZnJvbSBcIi4vYmFzZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbmRlckl0ZW0gPSAoaXRlbSkgPT4ge1xyXG4gIGNvbnN0IHNsaHRtbCA9IGBcclxuICAgIDxsaSBjbGFzcz1cInNob3BwaW5nX19pdGVtXCIgZGF0YS1pdGVtaWQ9JHtpdGVtLmlkfT5cclxuICAgICAgPHAgY2xhc3M9XCJzaG9wcGluZ19fZGVzY3JpcHRpb25cIj4ke2l0ZW0uaXRlbX08L3A+XHJcbiAgICAgIDxidXR0b24gY2xhc3M9XCJzaG9wcGluZ19fZGVsZXRlIGJ0bi10aW55XCI+XHJcbiAgICAgICAgICA8c3ZnPlxyXG4gICAgICAgICAgICAgIDx1c2UgaHJlZj1cImltZy9pY29ucy5zdmcjaWNvbi1jaXJjbGUtd2l0aC1jcm9zc1wiPjwvdXNlPlxyXG4gICAgICAgICAgPC9zdmc+XHJcbiAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9saT5gO1xyXG5cclxuICBET01lbGVtZW50cy5zaG9wcGluZ0xpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIHNsaHRtbCk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlSXRlbSA9IChpZCkgPT4ge1xyXG4gIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pdGVtaWQ9XCIke2lkfVwiXWApO1xyXG4gIGl0ZW0ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpdGVtKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjbGVhckl0ZW1zID0gKCkgPT4ge1xyXG4gIERPTWVsZW1lbnRzLnNob3BwaW5nTGlzdC5pbm5lckhUTUwgPSBcIlwiO1xyXG59O1xyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInV0aWxzIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJpc0Zvcm1EYXRhIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwidXJsIiwib3BlbiIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwicGFyYW1zIiwicGFyYW1zU2VyaWFsaXplciIsInRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VVUkwiLCJpbmRleE9mIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJpc1VuZGVmaW5lZCIsImUiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsImV4dGVuZCIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJkZWZhdWx0cyIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsImRlZmF1bHQiLCJtZXNzYWdlIiwidGhpcyIsInRvU3RyaW5nIiwiX19DQU5DRUxfXyIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJ0b2tlbiIsInJlYXNvbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJzb3VyY2UiLCJjIiwidmFsdWUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJhcmd1bWVudHMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaCIsImxlbmd0aCIsInNoaWZ0IiwiZ2V0VXJpIiwicmVwbGFjZSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJpZCIsImZuIiwiaCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJlcnJvciIsIkVycm9yIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0b0pTT04iLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImNvbmZpZzEiLCJjb25maWcyIiwidmFsdWVGcm9tQ29uZmlnMktleXMiLCJtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyIsImRlZmF1bHRUb0NvbmZpZzJLZXlzIiwiZGlyZWN0TWVyZ2VLZXlzIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsInNsaWNlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJheGlvc0tleXMiLCJjb25jYXQiLCJvdGhlcktleXMiLCJPYmplY3QiLCJrZXlzIiwiZmlsdGVyIiwidmFsaWRhdGVTdGF0dXMiLCJmbnMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJwcm9jZXNzIiwiY2FsbCIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ0aGlzQXJnIiwiYXJncyIsIkFycmF5IiwiaSIsImFwcGx5IiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImhhc2htYXJrSW5kZXgiLCJyZWxhdGl2ZVVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJtYXRjaCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsInRlc3QiLCJwYXlsb2FkIiwib3JpZ2luVVJMIiwibXNpZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwibGluZSIsInRyaW0iLCJzdWJzdHIiLCJjYWxsYmFjayIsImFyciIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsIm9iaiIsImwiLCJoYXNPd25Qcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwiRm9ybURhdGEiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInBpcGUiLCJVUkxTZWFyY2hQYXJhbXMiLCJwcm9kdWN0IiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhIiwiYiIsInN0ciIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJpdCIsImNvZiIsIm1zZyIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90byIsImF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsInRvTGVuZ3RoIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiTyIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImNvdW50IiwiTWF0aCIsIm1pbiIsImluYyIsImFMZW4iLCJlbmRQb3MiLCJ0b0lPYmplY3QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJjdHgiLCJJT2JqZWN0IiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjYWxsYmFja2ZuIiwidGhhdCIsInJlcyIsInNlbGYiLCJmIiwiYUZ1bmN0aW9uIiwibWVtbyIsImlzUmlnaHQiLCJTUEVDSUVTIiwib3JpZ2luYWwiLCJDIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiaW52b2tlIiwiYXJyYXlTbGljZSIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsIkYiLCJuIiwiRnVuY3Rpb24iLCJwYXJ0QXJncyIsImJvdW5kIiwiVEFHIiwiQVJHIiwiVCIsIkIiLCJ0cnlHZXQiLCJjYWxsZWUiLCJkUCIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsImZvck9mIiwiJGl0ZXJEZWZpbmUiLCJzdGVwIiwic2V0U3BlY2llcyIsIkRFU0NSSVBUT1JTIiwiZmFzdEtleSIsInZhbGlkYXRlIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfaSIsIl9mIiwiayIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIk5BTUUiLCJBRERFUiIsIml0ZXJhYmxlIiwiX3QiLCJfbCIsImNsZWFyIiwiciIsInAiLCJuZXh0IiwicHJldiIsImhhcyIsImdldCIsImRlZiIsInNldFN0cm9uZyIsIml0ZXJhdGVkIiwia2luZCIsIl9rIiwiZ2V0V2VhayIsImFuT2JqZWN0IiwiY3JlYXRlQXJyYXlNZXRob2QiLCIkaGFzIiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInN0b3JlIiwic2V0Iiwic3BsaWNlIiwidWZzdG9yZSIsImdsb2JhbCIsIiRleHBvcnQiLCJyZWRlZmluZSIsIm1ldGEiLCJmYWlscyIsIiRpdGVyRGV0ZWN0Iiwic2V0VG9TdHJpbmdUYWciLCJpbmhlcml0SWZSZXF1aXJlZCIsIm1ldGhvZHMiLCJJU19XRUFLIiwiQmFzZSIsInByb3RvIiwiZml4TWV0aG9kIiwiS0VZIiwiZW50cmllcyIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiaXRlciIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJORUVEIiwiRyIsIlciLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsIiRkZWZpbmVQcm9wZXJ0eSIsImNyZWF0ZURlc2MiLCJvYmplY3QiLCJnZXRUaW1lIiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJOYU4iLCJpc0Zpbml0ZSIsIlJhbmdlRXJyb3IiLCJkIiwieSIsImdldFVUQ0Z1bGxZZWFyIiwibSIsImdldFVUQ01pbGxpc2Vjb25kcyIsInMiLCJhYnMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwidG9QcmltaXRpdmUiLCJOVU1CRVIiLCJoaW50IiwiZGVmaW5lUHJvcGVydHkiLCJpcyIsImdldEtleXMiLCJnT1BTIiwicElFIiwiZ2V0U3ltYm9scyIsInN5bWJvbHMiLCJpc0VudW0iLCJoaWRlIiwidHlwZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIklTX0dMT0JBTCIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJleHBQcm90byIsIlUiLCJSIiwiTUFUQ0giLCJyZSIsImV4ZWMiLCJkZWZpbmVkIiwid2tzIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsImRvbmUiLCJzdHJmbiIsInJ4Zm4iLCJTdHJpbmciLCJzdHJpbmciLCJhcmciLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJJVEVSQVRPUiIsIml0ZXJhdG9yIiwiaXRlckZuIiwiX19nIiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0UHJvdG90eXBlT2YiLCJ1biIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiSXRlcmF0b3JzIiwiZmxvb3IiLCJpc1JlZ0V4cCIsInJldCIsImRlc2NyaXB0b3IiLCJJdGVyYXRvclByb3RvdHlwZSIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsIkJVR0dZIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiZ2V0TWV0aG9kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJ2YWx1ZXMiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwic2FmZSIsIiRleHBtMSIsImV4cG0xIiwieCIsInNpZ24iLCJwb3ciLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsIkluZmluaXR5IiwibG9nMXAiLCJsb2ciLCJNRVRBIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJvbkZyZWV6ZSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiU3ltYm9sIiwiSyIsImoiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93IiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJJRThfRE9NX0RFRklORSIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJpc0VudHJpZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIiRwYXJzZUZsb2F0IiwiJHRyaW0iLCIkcGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImJpdG1hcCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIlNSQyIsIiR0b1N0cmluZyIsIlRPX1NUUklORyIsIlRQTCIsImNsYXNzb2YiLCJidWlsdGluRXhlYyIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwibmF0aXZlRXhlYyIsIm5hdGl2ZVJlcGxhY2UiLCJwYXRjaGVkRXhlYyIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJjaGVjayIsImJ1Z2d5IiwiX19wcm90b19fIiwidGFnIiwic3RhdCIsInNoYXJlZCIsInVpZCIsIlNIQVJFRCIsIm1vZGUiLCJjb3B5cmlnaHQiLCJEIiwidG9JbnRlZ2VyIiwicG9zIiwic2VhcmNoU3RyaW5nIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGVhdCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJsZWZ0Iiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsImludE1heExlbmd0aCIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJjZWlsIiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwiZGVmZXIiLCJjaGFubmVsIiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImV2ZW50IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsImFwcGVuZENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWF4IiwiaXNOYU4iLCJ2YWx1ZU9mIiwiJHR5cGVkIiwiJGJ1ZmZlciIsInByb3BlcnR5RGVzYyIsInRvSW5kZXgiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwiQXJyYXlJdGVyYXRvcnMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlVpbnQ4QXJyYXkiLCJBUlJBWV9CVUZGRVIiLCJTSEFSRURfQlVGRkVSIiwiQllURVNfUEVSX0VMRU1FTlQiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5SW5jbHVkZXMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIldST05HX0xFTkdUSCIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0Iiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwibWFwZm4iLCJtYXBwaW5nIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsImV2ZXJ5IiwiZmlsbCIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJzZWFyY2hFbGVtZW50IiwiaW5jbHVkZXMiLCJzZXBhcmF0b3IiLCJtYXAiLCJyZXZlcnNlIiwibWlkZGxlIiwic29tZSIsImNvbXBhcmVmbiIsInN1YmFycmF5IiwiYmVnaW4iLCIkYmVnaW4iLCJieXRlT2Zmc2V0IiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiVEFDIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJvIiwiZ2V0dGVyIiwicm91bmQiLCJzZXR0ZXIiLCIkb2Zmc2V0IiwiJGxlbmd0aCIsImJ5dGVMZW5ndGgiLCJrbGFzcyIsIiRsZW4iLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiREFUQV9WSUVXIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiTE4yIiwiQlVGRkVSIiwiQllURV9MRU5HVEgiLCJCWVRFX09GRlNFVCIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsInB4IiwicmFuZG9tIiwid2tzRXh0IiwiJFN5bWJvbCIsIlVTRV9TWU1CT0wiLCIkZXZlcnkiLCIkZmlsdGVyIiwiJGZpbmQiLCJmb3JjZWQiLCIkZm9yRWFjaCIsIlNUUklDVCIsImNyZWF0ZVByb3BlcnR5IiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIiRyZWR1Y2UiLCJ1cFRvIiwic2l6ZSIsImNsb25lZCIsIiRzb21lIiwiJHNvcnQiLCJwdiIsIlRPX1BSSU1JVElWRSIsIkRhdGVQcm90byIsIklOVkFMSURfREFURSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCJGUHJvdG8iLCJuYW1lUkUiLCJzdHJvbmciLCJNQVAiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwiRSIsInRhbmgiLCJ0cnVuYyIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJmaXJzdCIsImRpZ2l0cyIsInBhcnNlSW50IiwiX2lzRmluaXRlIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwicGFyc2VGbG9hdCIsImFOdW1iZXJWYWx1ZSIsIiR0b0ZpeGVkIiwidG9GaXhlZCIsIkVSUk9SIiwiWkVSTyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsInQiLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiRmYWlscyIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiJGZyZWV6ZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0UHJvdG90eXBlT2YiLCIkaXNFeHRlbnNpYmxlIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJHNlYWwiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiUFJPTUlTRSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiVVNFX05BVElWRSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJjb25zb2xlIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXJyIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwickFwcGx5IiwiZkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIkwiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJhdHRyaWJ1dGVzIiwiZGVsZXRlUHJvcGVydHkiLCJFbnVtZXJhdGUiLCJlbnVtZXJhdGUiLCJnZXRQcm90byIsInJlY2VpdmVyIiwic2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsIiRmbGFncyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwicHJveHkiLCJmbGFncyIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiTUFYX1VJTlQzMiIsIlNVUFBPUlRTX1kiLCJTUExJVCIsIiRzcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxhc3RMZW5ndGgiLCJvdXRwdXQiLCJsYXN0TGFzdEluZGV4Iiwic3BsaXRMaW1pdCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsImxpbSIsInEiLCJkZWZpbmUiLCJhZGQiLCIkYXQiLCJjb2RlUG9pbnRBdCIsIkVORFNfV0lUSCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJjb2xvciIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIklOQ0xVREVTIiwicG9pbnQiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsIlNUQVJUU19XSVRIIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJ3cmFwIiwic3ltIiwiaXNTeW1ib2wiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCIkaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCJXRUFLX01BUCIsIiRXZWFrTWFwIiwiV0VBS19TRVQiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0TWFwIiwiJGluY2x1ZGVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImdldERlc2MiLCIkdmFsdWVzIiwib25GaW5hbGx5IiwiJHBhZCIsIldFQktJVF9CVUciLCJwYWRFbmQiLCJwYWRTdGFydCIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCIkdGFzayIsIk1TSUUiLCJ0aW1lIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJwb3AiLCJza2lwVGVtcFJlc2V0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwicGlkIiwicHJlZml4Iiwic3VmZml4IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwicmVxdWlyZSIsIlNlYXJjaCIsInF1ZXJ5IiwicmVjaXBlcyIsImFsZXJ0IiwiRE9NZWxlbWVudHMiLCJzZWFyY2hGb3JtIiwicXVlcnlTZWxlY3RvciIsInNlYXJjaElucHV0Iiwic2VhcmNoUmVzdWx0TGlzdCIsInNlYXJjaFJlc3VsdERpdiIsInBhZ2VCdXR0b25zIiwicmVjaXBlRGl2Iiwic2hvcHBpbmdMaXN0IiwibGlrZUJ1dHRvbiIsImxpa2VzTWVudSIsImxpa2VzTGlzdCIsImVsZW1lbnRTdHJpbmdzIiwicmVuZGVyTG9hZGVyIiwibG9hZGVyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiY2xlYXJMb2FkZXIiLCJwYXJlbnRFbGVtZW50IiwicmVuZGVyUmVjaXBlIiwicmVjaXBlIiwibWFya3VwIiwicmVjaXBlX2lkIiwiaW1hZ2VfdXJsIiwidGl0bGUiLCJwdWJsaXNoZXIiLCJjbGVhclNlYXJjaFJlc3VsdCIsImlubmVySFRNTCIsImNyZWF0ZUJ1dHRvbiIsInBhZ2UiLCJkaXJlY3Rpb24iLCJyZW5kZXJCdXR0b25zIiwiY3VycmVudFBhZ2UiLCJ0b3RhbFBhZ2VzIiwiYnV0dG9uSFRNTCIsInJlbmRlclJlY2lwZXMiLCJyZXNQZXJQYWdlIiwicGFnZVN0YXJ0IiwicGFnZUVuZCIsIlJlY2lwZSIsImluZ3JlZGllbnRzIiwic291cmNlX3VybCIsInB1Ymxpc2hlcl91cmwiLCJMaXN0IiwiaXRlbXMiLCJpdGVtIiwibmV3SXRlbSIsInVuaXFpZCIsImFjdGl2ZVJlY2lwZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc0xpc3QiLCJEb21PYmoiLCJMaWtlIiwicmVhZExvY2FsU3RvcmFnZSIsImxpa2VzIiwiaW1nIiwibGlrZSIsInNhdmVEYXRhVG9Mb2NhbFN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInRvZ2dsZUxpa2VCdG4iLCJpc0xpa2VkIiwiaWNvblN0cmluZyIsInRvZ2dsZUxpa2VNZW51IiwibnVtYmVyT2ZMaWtlcyIsInZpc2liaWxpdHkiLCJyZW5kZXJMaWtlcyIsIm5ld0xpa2UiLCJsbF9odG1sIiwiZWxlbWVudElkIiwiY29udHJvbFNlYXJjaCIsInNlYXJjaFZpZXciLCJkb1NlYXJjaCIsInBsYWNlaG9sZGVyIiwicHJldmVudERlZmF1bHQiLCJzZWFyY2hCeVdvcmQiLCJzZWFyY2hCeUJ1dHRvbiIsImNsb3Nlc3QiLCJidG4iLCJnb3RvIiwiZGF0YXNldCIsImNvbnRyb2xSZWNpcGUiLCJnZXRSZWNpcGUiLCJsaWtlc1ZpZXciLCJnZXROdW1iZXJPZkxpa2VzIiwibWF0Y2hlcyIsInNsaHRtbCIsImFkZEl0ZW0iLCJjdXJyZW50UmVjaXBlIiwiZGVsZXRlTGlrZSIsImFkZExpa2UiLCJjb250cm9sTGlrZSIsIml0ZW1pZCIsImRlbGV0ZUl0ZW0iLCJsaXN0VmlldyJdLCJzb3VyY2VSb290IjoiIn0=